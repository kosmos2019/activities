{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/ProfileStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/details/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","app/common/options/categoryOptions.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/profiles/ProfileHeader.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","profile","userName","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","title","date","description","category","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","undefined","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","x","isHost","hostUserName","host","find","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendee","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followingsCount","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","setDisplayName","facebookLogin","FB","authResponse","scope","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","UserActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","updateProfile","activityStore","loadFollowings","loadUserActivities","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","marginBotton","fluid","ValidationErrors","Message","List","map","err","i","validationSchema","Yup","required","isValid","dirty","disabled","Segment","vertical","size","marginBottom","isLoggedIn","Divider","horizontal","Reveal","animated","Content","visible","width","hidden","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","attached","secondary","clearing","floated","groupedActivities","group","sub","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","Loader","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","CategoryOptions","useHistory","useParams","SetActivity","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","Top","ribbon","verticalAlign","length","relaxed","divided","Extra","StatisticGroup","Statistic","PhotoWidgetDropzone","setFiles","dzStyles","borderRaduis","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","widths","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","bio","ProfileAbout","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","userActivity","objectFit","Meta","ProfileActivities","menuPosition","TestErrors","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.78b8e56f.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T>{\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber = 1;\n    pageSize = 2;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { store } from '../stores/store';\nimport { User, UserFormValues } from '../models/user';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { PaginatedResult } from '../models/pagination';\nimport { request } from 'node:http';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>;\n    }\n\n    return response;\n}, (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors?.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key]);\n                    }\n                }\n                throw modalStateErrors.flat();\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody)\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params }).then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n    fbLogin: (accessToken: string) => requests.post<User>(`account/fbLogin/?accessToken=${accessToken}`, {})\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: { 'Content-type': 'multipart/form-data' }\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n    update: (profile: Partial<Profile>) => requests.put<void>(`/profiles/${profile.userName}`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) =>\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate?: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from './profile';\n\nexport interface Activity {\n  id: string;\n  title: string;\n  date: Date | null;\n  description: string;\n  category: string;\n  city: string;\n  venue: string;\n  hostUserName: string;\n  isCancelled: boolean;\n  isGoing: boolean;\n  isHost: boolean;\n  host?: Profile;\n  attendees?: Profile[];\n}\n\nexport class Activity implements Activity {\n  constructor(init?: ActivityFormValues) {\n    Object.assign(this, init);\n  }\n}\n\nexport class ActivityFormValues {\n  id: string = '';\n  title: string = '';\n  date: Date | null = null;\n  description: string = '';\n  category: string = '';\n  city: string = '';\n  venue: string = '';\n\n  constructor(activity?: ActivityFormValues) {\n    if (activity) {\n      this.id = activity.id;\n      this.title = activity.title;\n      this.date = activity.date;\n      this.description = activity.description;\n      this.category = activity.category;\n      this.city = activity.city;\n      this.venue = activity.venue;\n    }\n  }\n}\n","import { User } from \"./user\";\n\nexport interface Profile {\n    userName: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    photos?: Photo[];\n    following: boolean;\n    followingsCount: number;\n    followersCount: number;\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.userName = user.userName;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string,\n    url: string,\n    isMain: boolean\n}\n\nexport interface UserActivity {\n    id: string,\n    title: string,\n    category: string,\n    date: string\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { format } from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = true;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        );\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete(predicate);\n                this.predicate.set(predicate, value);\n                break;\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n\n        params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\n        params.append(\"pageSize\", this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString());\n            } else {\n                params.append(key, value);\n            }\n        })\n\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\n            a.date!.getTime() - b.date!.getTime())\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as { [key: string]: Activity[] })\n        )\n    }\n\n    loadActivities = async () => {\n        this.setLoadingInitial(true);\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            // We can using runInAction()\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            });\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n        return activity;\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                x => x.userName === user.userName\n            );\n            activity.isHost = activity.hostUserName === user.userName;\n            activity.host = activity.attendees?.find(x => x.userName === activity.hostUserName);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUserName = user!.userName;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendee = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees =\n                        this.selectedActivity.attendees?.filter(a => a.userName !== user?.userName);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => { this.loading = false });\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => { this.loading = false });\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees?.forEach(attendee => {\n                if (attendee.userName === username) {\n                    attendee.following ? attendee.followingsCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}","import { makeAutoObservable, runInAction } from 'mobx';\nimport { User, UserFormValues } from \"../models/user\";\nimport agent from \"../api/agent\";\nimport { store } from './store';\nimport { history } from '../..';\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user)\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    }\n\n    setDisplayName = (displayName: string) => {\n        if (this.user) this.user.displayName = displayName;\n    }\n\n    facebookLogin = () => {\n        window.FB.login(response => {\n            agent.Account.fbLogin(response.authResponse.accessToken).then(user => console.log(user));\n        }, { scope: 'public_profile,email' })\n    }\n}","import agent from '../api/agent';\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { store } from './store';\nimport { string } from 'yup/lib/locale';\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    UserActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.userName === this.profile.userName;\n        }\n\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            });\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n\n        try {\n            await agent.Profiles.update(profile);\n            runInAction(() => {\n                if (profile.displayName &&\n                    profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.loading = false;\n            });\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.userName !== store.userStore.user?.userName &&\n                    this.profile.userName !== username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.userName === store.userStore.user?.userName) {\n                    following ? this.profile.followingsCount++ : this.profile.followingsCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.userName === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            });\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.userName, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate);\n            runInAction(() => {\n                this.UserActivities = activities;\n                this.loadingActivities = false\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingActivities = false);\n        }\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommonStore from \"./commonStore\";\nimport UserStore from \"./userStore\";\nimport ModalStore from './modalStore';\nimport ProfileStore from './ProfileStore';\nimport CommentStore from './commentStore';\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from '../models/serverError';\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        );\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import React from 'react';\nimport { makeAutoObservable } from 'mobx';\n\ninterface Modal {\n    open: boolean,\n    body: JSX.Element | null\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import React from 'react'\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { ChatComment } from '../models/comment';\nimport { makeAutoObservable, runInAction } from 'mobx';\nimport { store } from './store';\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            });\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n\n        try {\n            this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar() {\n    const { userStore: { user, logout } } = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name=\"Actvities\" />\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\n                <Menu.Item>\n                    <Button positive content=\"Create Activity\"\n                        as={NavLink} to='/createActivity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu >\n    );\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const { userStore } = useStore();\n    return (\n        <Formik\n            initialValues={{ email: '', password: '', error: null }}\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\n                setErrors({ error: 'Invalid email or password' }))}\n        >\n            {({ handleSubmit, isSubmitting, errors }) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() =>\n                            <Label style={{ marginBotton: 10 }} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({ errors }: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { Button, Header } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const { userStore } = useStore();\n\n    const validationSchema = Yup.object({\n        displayName: Yup.string().required(),\n        userName: Yup.string().required(),\n        email: Yup.string().required().email(),\n        password: Yup.string().required()\n    });\n\n    return (\n        <Formik\n            initialValues={{ displayName: '', userName: '', email: '', password: '', error: null }}\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\n                setErrors({ error }))}\n            validationSchema={validationSchema}\n        >\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='userName' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() =>\n                            <ValidationErrors errors={errors.error} />}\n                    />\n                    <Button\n                        disabled={isSubmitting || !isValid || !dirty}\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to activities!\n                        </Button>\n                    </>\n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Login!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register!\n                        </Button>\n                        <Divider horizontal inverted>Or</Divider>\n                        <Button\n                            size='huge'\n                            inverted\n                            color='facebook'\n                            content='Login with Facebook'\n                            onClick={userStore.facebookLogin}\n                        />\n                    </>\n                )}\n            </Container>\n        </Segment>\n    );\n})","import React, { SyntheticEvent } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Reveal, Button } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const { profileStore, userStore } = useStore();\n    const { updateFollowing, loading } = profileStore;\n\n    if (userStore.user?.userName === profile.userName) return null;\n\n    function handleFollow(e: SyntheticEvent) {\n        e.preventDefault();\n        updateFollowing(profile.userName, !profile.following);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    color='teal'\n                    content={profile.following ? 'Following' : 'Not following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    onClick={e => handleFollow(e)}\n                />\n            </Reveal.Content>\n        </Reveal>)\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\nexport default observer(function ProfileCard({ profile }: Props) {\n    return (\n        <Card as={Link} to={`/profiles/${profile.userName}`} >\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>Bio goes here</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Image, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.userName}\n                    trigger={\n                        <List.Item key={attendee.userName} as={Link} to={`/profiles/${attendee.userName}`}>\n                            <Image\n                                size='mini'\n                                circular src={attendee.image || '/assets/user.png'}\n                                bordered\n                                style={attendee.following ? styles : null} />\n                        </List.Item>}\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n            ))}\n        </List>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Segment, Label } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport { format } from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{ marginBottom: 4 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUserName}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n    const { activityStore } = useStore();\n    const { groupedActivities } = activityStore;\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n    );\n})","import Calendar from 'react-calendar'\nimport { Header, Menu } from 'semantic-ui-react'\nimport React from 'react'\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters() {\n    const { activityStore: { predicate, setPredicate } } = useStore();\n\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item\n                    content='All activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar\n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    );\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport { useStore } from '../../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport ActivityFilters from '../details/ActivityFilters'\nimport { useState } from 'react';\nimport { PagingParams } from '../../../app/models/pagination';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityListItemPlaceHolder from './ActivityListItemPlaceholder';\n\nexport default observer(function ActivityDashboard() {\n    const { activityStore } = useStore();\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities]);\n\n    // if (activityStore.loadingInitial && !loadingNext) { return (<LoadingComponent content='Loading activities...' />) }\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceHolder />\n                        <ActivityListItemPlaceHolder />\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    );\n})\n\n{/* <Button\n    floated='right'\n    content='More...'\n    positive\n    onClick={handleGetNext}\n    loading={loadingNext}\n    disabled={pagination?.currentPage === pagination?.totalPages}\n/> */}","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({ inverted = true, content = 'Loading...' }: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    rows: number;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea\n                {...field}\n                {...props}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    options: any;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)} \n                placeholder={props.placeholder} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","export const CategoryOptions = [\n    { text: 'Drinks', value: 'drinks' },\n    { text: 'Culture', value: 'culture' },\n    { text: 'Film', value: 'film' },\n    { text: 'Food', value: 'food' },\n    { text: 'Music', value: 'music' },\n    { text: 'Travel', value: 'travel' }\n]","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { CategoryOptions } from '../../../app/common/options/categoryOptions';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\nexport default observer(function ActivityFrom() {\n    let history = useHistory();\n    const { activityStore } = useStore();\n    const { loadingInitial, createActivity, updateActivity, loadActivity } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, SetActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        city: Yup.string().required(),\n        venue: Yup.string().required()\n    });\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => SetActivity(new ActivityFormValues(activity!)));\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize\n                initialValues={activity}\n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea placeholder='Description' name='description' rows={3} />\n                        <MySelectInput options={CategoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput\n                            placeholderText='Date'\n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy hh:mm aa'\n                        />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button\n                            disabled={isSubmitting || !isValid || !dirty}\n                            loading={isSubmitting} floated='right'\n                            positive type='submit' content='Submit'\n                        />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    );\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns/esm'\n\nexport interface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n\n        return (() => {\n            commentStore.clearComments();\n        })\n    }, [commentStore, activityId]);\n\n    const validationSchema = Yup.object({\n        body: Yup.string().required(),\n    })\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    validationSchema={validationSchema}\n                    initialValues={{ body: '' }}\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}>\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }} >\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n    const { activityStore: { updateAttendee, loading, cancelActivityToggle } } = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                {activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, Top: 20 }}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'white' }}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button color={activity.isCancelled ? 'green' : 'red'} floated='left' basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link} to={`/manage/${activity.id}`}\n                            disabled={activity.isCancelled}\n                            color='orange' floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendee}>Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled}\n                        loading={loading}\n                        onClick={updateAttendee} color='teal'>\n                        Join Activity\n                    </Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.userName}>\n                            {attendee.userName === host?.userName &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>\n                            }\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.userName}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n                                }\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react'\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\nexport default observer(function ActivityDetails() {\n    const { activityStore } = useStore();\n    const { selectedActivity: activity, loadingInitial, loadActivity, clearSelectedActivity } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity} />\n            </Grid.Column>\n        </Grid>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Segment, Grid, Item, Header, StatisticGroup, Statistic, Divider } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({ profile }: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <StatisticGroup>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingsCount} />\n                    </StatisticGroup>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n})","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRaduis: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })));\n    }, [setFiles])\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{ height: 200, width: '100%' }}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport { Cropper } from 'react-cropper';\nimport { useEffect } from 'react';\n\ninterface Props {\n    uploadPhoto: (file: Blob) => void;\n    loading: boolean;\n}\n\nexport default function PhotoUploadWidget({ uploadPhoto, loading }: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                    <>\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                        <Button.Group widths={2}>\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>\n                }\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n    const { profileStore: { isCurrentUser, uploadPhoto,\n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => { setAddPhotoMode(false) });\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)} />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                        <Card.Group itemsPerRow={5}>\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser && (\n                                        <Button.Group fluid widths={2}>\n                                            <Button\n                                                name={'main' + photo.id}\n                                                disabled={photo.isMain}\n                                                basic\n                                                color='green'\n                                                content='Main'\n                                                loading={target === 'main' + photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)} />\n                                            <Button\n                                                name={photo.id}\n                                                disabled={photo.isMain}\n                                                basic\n                                                color='red'\n                                                icon='trash'\n                                                loading={target === photo.id && loading}\n                                                onClick={e => handleDeletePhoto(photo, e)} />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Formik, Form } from 'formik';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport MyTextArea from '../../app/common/form/MyTextArea';\nimport { useStore } from '../../app/stores/store';\nimport { Profile } from '../../app/models/profile';\nimport * as Yup from 'yup';\nimport { observer } from 'mobx-react-lite';\n\ninterface Props {\n    editMode: (mode: boolean) => void;\n}\n\nexport default observer(function ProfileEditForm({ editMode }: Props) {\n    const { profileStore: { profile, updateProfile, loading } } = useStore();\n\n    function handleFormSubmit(profile: Partial<Profile>) {\n        updateProfile(profile).then(() => editMode(false));\n    }\n\n    const validationSchema = Yup.object({\n        displayName: Yup.string().required(),\n        bio: Yup.string().required()\n    })\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\n            onSubmit={values => handleFormSubmit(values)} >\n            {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                <Form className='ui form'>\n                    <MyTextInput name='displayName' placeholder='DisplayName' />\n                    <MyTextArea name='bio' placeholder='Add your bio' rows={3} />\n                    <Button\n                        disabled={isSubmitting || !isValid || !dirty || loading}\n                        floated='right'\n                        positive\n                        type='submit'\n                        content='Update profile' />\n                </Form>\n            )}\n        </Formik >\n    )\n})","import React, { useState } from 'react';\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEditForm from './ProfileEditForm';\n\nexport default function ProfileAbout() {\n    const [editMode, setEditMode] = useState(false);\n    const { profileStore: { isCurrentUser } } = useStore();\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user' content='About Bob' />\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)} />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {isCurrentUser && editMode && (\n                        <ProfileEditForm editMode={setEditMode} />\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const { profileStore } = useStore();\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user'\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` :\n                            `People ${profile?.displayName} is following`} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.userName} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React, { SyntheticEvent } from 'react';\nimport { Grid, Header, Tab, Card, Image, TabProps } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { format } from 'date-fns';\nimport { Link } from 'react-router-dom';\n\nexport default observer(function ProfleActivities() {\n    const { profileStore: {\n        profile,\n        loadingActivities,\n        loadUserActivities,\n        UserActivities } } = useStore();\n\n    const panes = [\n        { menuItem: 'Future Events', pane: { key: 'future' } },\n        { menuItem: 'Past Events', pane: { key: 'past' } },\n        { menuItem: 'Hosting', pane: { key: 'hosting' } }\n    ]\n\n    useEffect(() => {\n        loadUserActivities(profile!.userName);\n    }, [loadUserActivities, profile])\n\n    function handleTabChange(e: SyntheticEvent, data: TabProps) {\n        loadUserActivities(profile!.userName,\n            panes[data.activeIndex as number].pane.key)\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content='Activities' />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {UserActivities?.map(userActivity => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${userActivity.id}`}\n                                key={userActivity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${userActivity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{userActivity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(userActivity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(userActivity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n})","import React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport ProfilePhotos from './ProfilePhotos';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfileActivities from './ProfileActivities';\nimport { useStore } from '../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({ profile }: Props) {\n    const { profileStore } = useStore();\n\n    const panes = [\n        { menuItem: 'About', render: () => <ProfileAbout /> },\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\n        { menuItem: 'Following', render: () => <ProfileFollowings /> }\n    ];\n\n    return (\n        <Tab\n            menu={{ fluid: true, vertical: true }}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import React from 'react'\nimport { Grid } from 'semantic-ui-react'\nimport ProfileHeader from './ProfileHeader';\nimport ProfileContent from './ProfileContent';\nimport { observer } from 'mobx-react-lite';\nimport { useParams } from 'react-router-dom';\nimport { useStore } from '../../app/stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\n\n\nexport default observer(function ProfilePage() {\n    const { username } = useParams<{ username: string }>();\n    const { profileStore } = useStore();\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return (() => {\n            setActiveTab(0);\n        })\n    }, [loadProfile, username, setActiveTab]);\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>\n                }\n            </Grid.Column>\n        </Grid>\n    )\n})","import React, { useState } from 'react';\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}","import React from 'react';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const { commonStore } = useStore();\n\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{ marginTop: '10px' }}>\n                        {commonStore.error.details}\n                    </code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const { modalStore } = useStore();\n\n    return (\n        <Modal\n            open={modalStore.modal.open}\n            onClose={modalStore.closeModal}\n            size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router';\nimport { useStore } from '../stores/store';\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\n    const { userStore: { isLoggedIn } } = useStore();\n\n    return (\n        <Route\n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport NavBar from './NavBar';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport TestErrors from '../../features/errors/TestErrors';\nimport NotFound from '../../features/errors/NotFound';\nimport { ToastContainer } from 'react-toastify';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport PrivateRoute from '../layout/PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route path='/' exact component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute path='/activities' exact component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}