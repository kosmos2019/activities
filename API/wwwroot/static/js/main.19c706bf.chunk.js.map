{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/ProfileStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/details/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","app/common/options/categoryOptions.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/profiles/ProfileHeader.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","fbLogin","accessToken","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","profile","userName","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","title","date","description","category","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","undefined","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","x","isHost","hostUserName","host","find","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendee","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followingsCount","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","fbAccessToken","fbLoading","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","setDisplayName","getFacebookLoginStatus","FB","getLoginStatus","authResponse","facebookLogin","apiLogin","catch","scope","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","UserActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","updateProfile","activityStore","loadFollowings","loadUserActivities","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","marginBotton","fluid","ValidationErrors","Message","List","map","err","i","validationSchema","Yup","required","isValid","dirty","disabled","Segment","vertical","size","marginBottom","isLoggedIn","Divider","horizontal","Reveal","animated","Content","visible","width","hidden","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","attached","secondary","clearing","floated","groupedActivities","group","sub","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","Loader","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","CategoryOptions","useHistory","useParams","SetActivity","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","Top","ribbon","verticalAlign","length","relaxed","divided","Extra","StatisticGroup","Statistic","PhotoWidgetDropzone","setFiles","dzStyles","borderRaduis","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","widths","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","bio","ProfileAbout","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","userActivity","objectFit","Meta","ProfileActivities","menuPosition","TestErrors","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.19c706bf.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage: number;\r\n    itemsPerPage: number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data: T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T, pagination: Pagination) {\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber = 1;\r\n    pageSize = 2;\r\n\r\n    constructor(pageNumber = 1, pageSize = 2) {\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\r\nimport { toast } from 'react-toastify';\r\nimport { history } from '../..';\r\nimport { Activity, ActivityFormValues } from '../models/activity';\r\nimport { store } from '../stores/store';\r\nimport { User, UserFormValues } from '../models/user';\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { PaginatedResult } from '../models/pagination';\r\nimport { request } from 'node:http';\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n\r\n    return config;\r\n})\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors?.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\nconst requests = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody)\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params }).then(responseBody),\r\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\r\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => requests.get<User>('/account'),\r\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\r\n    fbLogin: (accessToken: string) => requests.post<User>(`account/fbLogin/?accessToken=${accessToken}`, {})\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'Content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\r\n    update: (profile: Partial<Profile>) => requests.put<void>(`/profiles/${profile.userName}`, profile),\r\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) =>\r\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate?: string) =>\r\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from './profile';\r\n\r\nexport interface Activity {\r\n  id: string;\r\n  title: string;\r\n  date: Date | null;\r\n  description: string;\r\n  category: string;\r\n  city: string;\r\n  venue: string;\r\n  hostUserName: string;\r\n  isCancelled: boolean;\r\n  isGoing: boolean;\r\n  isHost: boolean;\r\n  host?: Profile;\r\n  attendees?: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity {\r\n  constructor(init?: ActivityFormValues) {\r\n    Object.assign(this, init);\r\n  }\r\n}\r\n\r\nexport class ActivityFormValues {\r\n  id: string = '';\r\n  title: string = '';\r\n  date: Date | null = null;\r\n  description: string = '';\r\n  category: string = '';\r\n  city: string = '';\r\n  venue: string = '';\r\n\r\n  constructor(activity?: ActivityFormValues) {\r\n    if (activity) {\r\n      this.id = activity.id;\r\n      this.title = activity.title;\r\n      this.date = activity.date;\r\n      this.description = activity.description;\r\n      this.category = activity.category;\r\n      this.city = activity.city;\r\n      this.venue = activity.venue;\r\n    }\r\n  }\r\n}\r\n","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    userName: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    photos?: Photo[];\r\n    following: boolean;\r\n    followingsCount: number;\r\n    followersCount: number;\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User) {\r\n        this.userName = user.userName;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id: string,\r\n    url: string,\r\n    isMain: boolean\r\n}\r\n\r\nexport interface UserActivity {\r\n    id: string,\r\n    title: string,\r\n    category: string,\r\n    date: string\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\n\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = true;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        );\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete(predicate);\r\n                this.predicate.set(predicate, value);\r\n                break;\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n\r\n        params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\r\n        params.append(\"pageSize\", this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString());\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n\r\n        return params;\r\n    }\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\r\n            a.date!.getTime() - b.date!.getTime())\r\n    }\r\n\r\n    get groupedActivities() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.setLoadingInitial(true);\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            // We can using runInAction()\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            });\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n            } catch (error) {\r\n                console.log(error);\r\n                this.setLoadingInitial(false);\r\n            }\r\n        }\r\n        return activity;\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                x => x.userName === user.userName\r\n            );\r\n            activity.isHost = activity.hostUserName === user.userName;\r\n            activity.host = activity.attendees?.find(x => x.userName === activity.hostUserName);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUserName = user!.userName;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity);\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendee = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.userName !== user?.userName);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => { this.loading = false });\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => { this.loading = false });\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees?.forEach(attendee => {\r\n                if (attendee.userName === username) {\r\n                    attendee.following ? attendee.followingsCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}","import { makeAutoObservable, runInAction } from 'mobx';\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport agent from \"../api/agent\";\r\nimport { store } from './store';\r\nimport { history } from '../..';\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n    fbAccessToken: string | null = null;\r\n    fbLoading = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image: string) => {\r\n        if (this.user) this.user.image = image;\r\n    }\r\n\r\n    setDisplayName = (displayName: string) => {\r\n        if (this.user) this.user.displayName = displayName;\r\n    }\r\n\r\n    getFacebookLoginStatus = async () => {\r\n        window.FB.getLoginStatus(response => {\r\n            if (response.status === 'connected') {\r\n                this.fbAccessToken = response.authResponse.accessToken;\r\n            }\r\n        })\r\n    }\r\n\r\n    facebookLogin = () => {\r\n        this.fbLoading = true;\r\n        const apiLogin = (accessToken: string) => {\r\n            agent.Account.fbLogin(accessToken).then(user => {\r\n                store.commonStore.setToken(user.token);\r\n                runInAction(() => {\r\n                    this.user = user;\r\n                    this.fbLoading = false;\r\n                })\r\n                history.push('/activities');\r\n            }).catch(error => {\r\n                console.log(error);\r\n                runInAction(() => this.fbLoading = false);\r\n            })\r\n        }\r\n        if (this.fbAccessToken) {\r\n            apiLogin(this.fbAccessToken);\r\n        } else {\r\n            window.FB.login(response => {\r\n                apiLogin(response.authResponse.accessToken);\r\n            }, { scope: 'public_profile,email' })\r\n        }\r\n    }\r\n}","import agent from '../api/agent';\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport { Photo, Profile, UserActivity } from '../models/profile';\r\nimport { store } from './store';\r\nimport { string } from 'yup/lib/locale';\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings = false;\r\n    activeTab = 0;\r\n    UserActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.userName === this.profile.userName;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false);\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false);\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateProfile = async (profile: Partial<Profile>) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.update(profile);\r\n            runInAction(() => {\r\n                if (profile.displayName &&\r\n                    profile.displayName !== store.userStore.user?.displayName) {\r\n                    store.userStore.setDisplayName(profile.displayName);\r\n                }\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.userName !== store.userStore.user?.userName &&\r\n                    this.profile.userName !== username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.userName === store.userStore.user?.userName) {\r\n                    following ? this.profile.followingsCount++ : this.profile.followingsCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.userName === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.userName, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate);\r\n            runInAction(() => {\r\n                this.UserActivities = activities;\r\n                this.loadingActivities = false\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingActivities = false);\r\n        }\r\n    }\r\n}","import { createContext, useContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport UserStore from \"./userStore\";\r\nimport ModalStore from './modalStore';\r\nimport ProfileStore from './ProfileStore';\r\nimport CommentStore from './commentStore';\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore: CommonStore;\r\n    userStore: UserStore;\r\n    modalStore: ModalStore;\r\n    profileStore: ProfileStore;\r\n    commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore: new UserStore(),\r\n    modalStore: new ModalStore(),\r\n    profileStore: new ProfileStore(),\r\n    commentStore: new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from '../models/serverError';\r\n\r\nexport default class CommonStore {\r\n    error: ServerError | null = null;\r\n    token: string | null = window.localStorage.getItem('jwt');\r\n    appLoaded = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if (token) {\r\n                    window.localStorage.setItem('jwt', token);\r\n                } else {\r\n                    window.localStorage.removeItem('jwt');\r\n                }\r\n            }\r\n        );\r\n    }\r\n\r\n    setServerError = (error: ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token: string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n}","import React from 'react';\r\nimport { makeAutoObservable } from 'mobx';\r\n\r\ninterface Modal {\r\n    open: boolean,\r\n    body: JSX.Element | null\r\n}\r\n\r\nexport default class ModalStore {\r\n    modal: Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import React from 'react'\r\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\r\nimport { ChatComment } from '../models/comment';\r\nimport { makeAutoObservable, runInAction } from 'mobx';\r\nimport { store } from './store';\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\r\n\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                });\r\n            });\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment)\r\n                });\r\n            })\r\n        }\r\n    }\r\n\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection', error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values: any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n\r\n        try {\r\n            this.hubConnection?.invoke('SendComment', values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\r\nimport { useStore } from '../stores/store';\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact header>\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    Reactivities\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Actvities\" />\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\r\n                <Menu.Item>\r\n                    <Button positive content=\"Create Activity\"\r\n                        as={NavLink} to='/createActivity' />\r\n                </Menu.Item>\r\n                <Menu.Item position='right'>\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\r\n                    <Dropdown pointing='top left' text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My profile' icon='user' />\r\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu >\r\n    );\r\n})","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Formik, Form, ErrorMessage } from 'formik';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { Button, Header, Label } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <Label style={{ marginBotton: 10 }} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { Message } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}>{err}</Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Formik, Form, ErrorMessage } from 'formik';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport { Button, Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from '../errors/ValidationErrors';\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required(),\r\n        userName: Yup.string().required(),\r\n        email: Yup.string().required().email(),\r\n        password: Yup.string().required()\r\n    });\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', userName: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema={validationSchema}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\r\n                    <MyTextInput name='displayName' placeholder='Display Name' />\r\n                    <MyTextInput name='userName' placeholder='Username' />\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() =>\r\n                            <ValidationErrors errors={errors.error} />}\r\n                    />\r\n                    <Button\r\n                        disabled={isSubmitting || !isValid || !dirty}\r\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Link } from 'react-router-dom';\r\nimport { Container, Header, Segment, Image, Button, Divider } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport LoginForm from '../users/LoginForm';\r\nimport RegisterForm from '../users/RegisterForm';\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Reactivities\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                            Login!\r\n                        </Button>\r\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                            Register!\r\n                        </Button>\r\n                        <Divider horizontal inverted>Or</Divider>\r\n                        <Button\r\n                            loading={userStore.fbLoading}\r\n                            size='huge'\r\n                            inverted\r\n                            color='facebook'\r\n                            content='Login with Facebook'\r\n                            onClick={userStore.facebookLogin}\r\n                        />\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    );\r\n})","import React, { SyntheticEvent } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const { profileStore, userStore } = useStore();\r\n    const { updateFollowing, loading } = profileStore;\r\n\r\n    if (userStore.user?.userName === profile.userName) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent) {\r\n        e.preventDefault();\r\n        updateFollowing(profile.userName, !profile.following);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated='move'>\r\n            <Reveal.Content visible style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    color='teal'\r\n                    content={profile.following ? 'Following' : 'Not following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: '100%' }}>\r\n                <Button\r\n                    fluid\r\n                    basic\r\n                    color={profile.following ? 'red' : 'green'}\r\n                    content={profile.following ? 'Unfollow' : 'Follow'}\r\n                    onClick={e => handleFollow(e)}\r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>)\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    return (\r\n        <Card as={Link} to={`/profiles/${profile.userName}`} >\r\n            <Image src={profile.image || '/assets/user.png'} />\r\n            <Card.Content>\r\n                <Card.Header>{profile.displayName}</Card.Header>\r\n                <Card.Description>Bio goes here</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name='user' />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { List, Image, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup\r\n                    hoverable\r\n                    key={attendee.userName}\r\n                    trigger={\r\n                        <List.Item key={attendee.userName} as={Link} to={`/profiles/${attendee.userName}`}>\r\n                            <Image\r\n                                size='mini'\r\n                                circular src={attendee.image || '/assets/user.png'}\r\n                                bordered\r\n                                style={attendee.following ? styles : null} />\r\n                        </List.Item>}\r\n                >\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n            ))}\r\n        </List>\r\n    )\r\n})","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Icon, Item, Segment, Label } from 'semantic-ui-react';\r\nimport { Activity } from '../../../app/models/activity';\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ marginBottom: 4 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUserName}`}>{activity.host?.displayName}</Link></Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='orange'>\r\n                                        You are hosting this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color='green'>\r\n                                        You are going to this activity\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button\r\n                    as={Link}\r\n                    to={`/activities/${activity.id}`}\r\n                    color='teal'\r\n                    floated='right'\r\n                    content='View'\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    );\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { Fragment } from 'react';\r\nimport { Header } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityListItem from './ActivityListItem';\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivities } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivities.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color='teal'>\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n    );\r\n})","import Calendar from 'react-calendar'\r\nimport { Header, Menu } from 'semantic-ui-react'\r\nimport React from 'react'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const { activityStore: { predicate, setPredicate } } = useStore();\r\n\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item\r\n                    content='All activities'\r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm going\"\r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item\r\n                    content=\"I'm hosting\"\r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}\r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar\r\n                onChange={(date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    );\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { Grid, Loader } from 'semantic-ui-react';\r\nimport ActivityList from './ActivityList';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport ActivityFilters from '../details/ActivityFilters'\r\nimport { useState } from 'react';\r\nimport { PagingParams } from '../../../app/models/pagination';\r\nimport InfiniteScroll from 'react-infinite-scroller';\r\nimport ActivityListItemPlaceHolder from './ActivityListItemPlaceholder';\r\n\r\nexport default observer(function ActivityDashboard() {\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities]);\r\n\r\n    // if (activityStore.loadingInitial && !loadingNext) { return (<LoadingComponent content='Loading activities...' />) }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceHolder />\r\n                        <ActivityListItemPlaceHolder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width='6'>\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n})\r\n\r\n{/* <Button\r\n    floated='right'\r\n    content='More...'\r\n    positive\r\n    onClick={handleGetNext}\r\n    loading={loadingNext}\r\n    disabled={pagination?.currentPage === pagination?.totalPages}\r\n/> */}","import React from 'react';\r\nimport { Dimmer, Loader } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n}\r\n\r\nexport default function LoadingComponent({ inverted = true, content = 'Loading...' }: Props) {\r\n    return (\r\n        <Dimmer active={true} inverted={inverted}>\r\n            <Loader content={content} />\r\n        </Dimmer>\r\n    )\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    rows: number;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <textarea\r\n                {...field}\r\n                {...props}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label, Select } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    label?: string;\r\n    options: any;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)} \r\n                placeholder={props.placeholder} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}","import { useField } from 'formik';\r\nimport React from 'react';\r\nimport { Form, Label } from 'semantic-ui-react';\r\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error}>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color='red'>{meta.error}</Label>\r\n            ) : null}\r\n        </Form.Field>\r\n    );\r\n}","export const CategoryOptions = [\r\n    { text: 'Drinks', value: 'drinks' },\r\n    { text: 'Culture', value: 'culture' },\r\n    { text: 'Film', value: 'film' },\r\n    { text: 'Food', value: 'food' },\r\n    { text: 'Music', value: 'music' },\r\n    { text: 'Travel', value: 'travel' }\r\n]","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router';\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Segment } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport { v4 as uuid } from 'uuid';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\nimport { CategoryOptions } from '../../../app/common/options/categoryOptions';\r\nimport { ActivityFormValues } from '../../../app/models/activity';\r\n\r\nexport default observer(function ActivityFrom() {\r\n    let history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { loadingInitial, createActivity, updateActivity, loadActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, SetActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('The activity title is required'),\r\n        description: Yup.string().required('The activity description is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('Date is required').nullable(),\r\n        city: Yup.string().required(),\r\n        venue: Yup.string().required()\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => SetActivity(new ActivityFormValues(activity!)));\r\n    }, [id, loadActivity]);\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content='Activity Details' sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name='title' placeholder='Title' />\r\n                        <MyTextArea placeholder='Description' name='description' rows={3} />\r\n                        <MySelectInput options={CategoryOptions} placeholder='Category' name='category' />\r\n                        <MyDateInput\r\n                            placeholderText='Date'\r\n                            name='date'\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMMM d, yyyy hh:mm aa'\r\n                        />\r\n                        <Header content='Location Details' sub color='teal' />\r\n                        <MyTextInput placeholder='City' name='city' />\r\n                        <MyTextInput placeholder='Venue' name='venue' />\r\n                        <Button\r\n                            disabled={isSubmitting || !isValid || !dirty}\r\n                            loading={isSubmitting} floated='right'\r\n                            positive type='submit' content='Submit'\r\n                        />\r\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n        </Segment>\r\n    );\r\n})","import { Formik, Form, Field, FieldProps } from 'formik'\r\nimport { observer } from 'mobx-react-lite'\r\nimport React from 'react'\r\nimport { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store'\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns/esm'\r\n\r\nexport interface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n\r\n        return (() => {\r\n            commentStore.clearComments();\r\n        })\r\n    }, [commentStore, activityId]);\r\n\r\n    const validationSchema = Yup.object({\r\n        body: Yup.string().required(),\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    validationSchema={validationSchema}\r\n                    initialValues={{ body: '' }}\r\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}>\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form'>\r\n                            <Field name='body'>\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }} >\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>\r\n                                    {comment.displayName}\r\n                                </Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendee, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, Top: 20 }}\r\n                        ribbon color='red' content='Cancelled' />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link></strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button color={activity.isCancelled ? 'green' : 'red'} floated='left' basic\r\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link} to={`/manage/${activity.id}`}\r\n                            disabled={activity.isCancelled}\r\n                            color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendee}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled}\r\n                        loading={loading}\r\n                        onClick={updateAttendee} color='teal'>\r\n                        Join Activity\r\n                    </Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <span>\r\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                        </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal' />\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite'\r\nimport { Activity } from '../../../app/models/activity'\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.userName}>\r\n                            {attendee.userName === host?.userName &&\r\n                                <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>\r\n                            }\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.userName}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\r\n                                }\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { useEffect } from 'react'\r\nimport { useParams } from 'react-router';\r\nimport { Grid } from 'semantic-ui-react';\r\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\r\nimport { useStore } from '../../../app/stores/store';\r\nimport ActivityDetailedChat from './ActivityDetailedChat';\r\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\r\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\r\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\r\n\r\nexport default observer(function ActivityDetails() {\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadingInitial, loadActivity, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Segment, Grid, Item, Header, StatisticGroup, Statistic, Divider } from 'semantic-ui-react'\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileHeader({ profile }: Props) {\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Header as='h1' content={profile.displayName} />\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <StatisticGroup>\r\n                        <Statistic label='Followers' value={profile.followersCount} />\r\n                        <Statistic label='Following' value={profile.followingsCount} />\r\n                    </StatisticGroup>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n    );\r\n})","import React, { useCallback } from 'react'\r\nimport { useDropzone } from 'react-dropzone'\r\nimport { Header, Icon } from 'semantic-ui-react'\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void;\r\n}\r\n\r\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRaduis: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })));\r\n    }, [setFiles])\r\n\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size='huge' />\r\n            <Header content='Drop image here' />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview: string;\r\n    setCropper: (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\r\n    return (\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{ height: 200, width: '100%' }}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\r\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\r\nimport { Cropper } from 'react-cropper';\r\nimport { useEffect } from 'react';\r\n\r\ninterface Props {\r\n    uploadPhoto: (file: Blob) => void;\r\n    loading: boolean;\r\n}\r\n\r\nexport default function PhotoUploadWidget({ uploadPhoto, loading }: Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 1 - Add Photo' />\r\n                <PhotoWidgetDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 2 - Resize image' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto,\r\n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => { setAddPhotoMode(false) });\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='image' content='Photos' />\r\n                    {isCurrentUser && (\r\n                        <Button floated='right' basic\r\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)} />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group itemsPerRow={5}>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                name={'main' + photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                basic\r\n                                                color='green'\r\n                                                content='Main'\r\n                                                loading={target === 'main' + photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo, e)} />\r\n                                            <Button\r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                basic\r\n                                                color='red'\r\n                                                icon='trash'\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleDeletePhoto(photo, e)} />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React from 'react';\r\nimport { Button } from 'semantic-ui-react';\r\nimport { Formik, Form } from 'formik';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../app/common/form/MyTextArea';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { Profile } from '../../app/models/profile';\r\nimport * as Yup from 'yup';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface Props {\r\n    editMode: (mode: boolean) => void;\r\n}\r\n\r\nexport default observer(function ProfileEditForm({ editMode }: Props) {\r\n    const { profileStore: { profile, updateProfile, loading } } = useStore();\r\n\r\n    function handleFormSubmit(profile: Partial<Profile>) {\r\n        updateProfile(profile).then(() => editMode(false));\r\n    }\r\n\r\n    const validationSchema = Yup.object({\r\n        displayName: Yup.string().required(),\r\n        bio: Yup.string().required()\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            validationSchema={validationSchema}\r\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\r\n            onSubmit={values => handleFormSubmit(values)} >\r\n            {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                <Form className='ui form'>\r\n                    <MyTextInput name='displayName' placeholder='DisplayName' />\r\n                    <MyTextArea name='bio' placeholder='Add your bio' rows={3} />\r\n                    <Button\r\n                        disabled={isSubmitting || !isValid || !dirty || loading}\r\n                        floated='right'\r\n                        positive\r\n                        type='submit'\r\n                        content='Update profile' />\r\n                </Form>\r\n            )}\r\n        </Formik >\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileEditForm from './ProfileEditForm';\r\n\r\nexport default function ProfileAbout() {\r\n    const [editMode, setEditMode] = useState(false);\r\n    const { profileStore: { isCurrentUser } } = useStore();\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' content='About Bob' />\r\n                    {isCurrentUser && (\r\n                        <Button\r\n                            floated='right'\r\n                            basic\r\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\r\n                            onClick={() => setEditMode(!editMode)} />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {isCurrentUser && editMode && (\r\n                        <ProfileEditForm editMode={setEditMode} />\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings() {\r\n    const { profileStore } = useStore();\r\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user'\r\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` :\r\n                            `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.userName} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    )\r\n})","import React, { SyntheticEvent } from 'react';\r\nimport { Grid, Header, Tab, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useEffect } from 'react';\r\nimport { format } from 'date-fns';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default observer(function ProfleActivities() {\r\n    const { profileStore: {\r\n        profile,\r\n        loadingActivities,\r\n        loadUserActivities,\r\n        UserActivities } } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'Future Events', pane: { key: 'future' } },\r\n        { menuItem: 'Past Events', pane: { key: 'past' } },\r\n        { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n    ]\r\n\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.userName);\r\n    }, [loadUserActivities, profile])\r\n\r\n    function handleTabChange(e: SyntheticEvent, data: TabProps) {\r\n        loadUserActivities(profile!.userName,\r\n            panes[data.activeIndex as number].pane.key)\r\n    };\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar' content='Activities' />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {UserActivities?.map(userActivity => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${userActivity.id}`}\r\n                                key={userActivity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${userActivity.category}.jpg`}\r\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header textAlign='center'>{userActivity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(userActivity.date), 'do LLL')}</div>\r\n                                        <div>{format(new Date(userActivity.date), 'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n})","import React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport ProfilePhotos from './ProfilePhotos';\r\nimport ProfileAbout from './ProfileAbout';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const { profileStore } = useStore();\r\n\r\n    const panes = [\r\n        { menuItem: 'About', render: () => <ProfileAbout /> },\r\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\r\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\r\n        { menuItem: 'Following', render: () => <ProfileFollowings /> }\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition='right'\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import React from 'react'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport ProfileHeader from './ProfileHeader';\r\nimport ProfileContent from './ProfileContent';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useParams } from 'react-router-dom';\r\nimport { useStore } from '../../app/stores/store';\r\nimport { useEffect } from 'react';\r\nimport LoadingComponent from '../../app/layout/LoadingComponent';\r\n\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return (() => {\r\n            setActiveTab(0);\r\n        })\r\n    }, [loadProfile, username, setActiveTab]);\r\n\r\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <>\r\n                        <ProfileHeader profile={profile} />\r\n                        <ProfileContent profile={profile} />\r\n                    </>\r\n                }\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import React, { useState } from 'react';\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors &&\r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name='search' />\r\n                Oops - we've looked everywhere and could not find this.\r\n            </Header>\r\n            <Segment.Inline>\r\n                <Button as={Link} to='/activities' primary>\r\n                    Return to activities page\r\n                </Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Container, Header, Segment } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\nexport default observer(function ServerError() {\r\n    const { commonStore } = useStore();\r\n\r\n    return (\r\n        <Container>\r\n            <Header as='h1' content='Server Error' />\r\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as='h4' content='Stack trace' color='teal' />\r\n                    <code style={{ marginTop: '10px' }}>\r\n                        {commonStore.error.details}\r\n                    </code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal\r\n            open={modalStore.modal.open}\r\n            onClose={modalStore.closeModal}\r\n            size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n})","import React from 'react';\r\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router';\r\nimport { useStore } from '../stores/store';\r\n\r\ninterface Props extends RouteProps {\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\r\n    const { userStore: { isLoggedIn } } = useStore();\r\n\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\r\n        />\r\n    )\r\n}","import React, { useEffect } from 'react';\r\nimport { Container } from 'semantic-ui-react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Route, Switch, useLocation } from 'react-router';\r\nimport NavBar from './NavBar';\r\nimport HomePage from '../../features/home/HomePage';\r\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\r\nimport ActivityForm from '../../features/activities/form/ActivityForm';\r\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\r\nimport ProfilePage from '../../features/profiles/ProfilePage';\r\nimport TestErrors from '../../features/errors/TestErrors';\r\nimport NotFound from '../../features/errors/NotFound';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport ServerError from '../../features/errors/ServerError';\r\nimport { useStore } from '../stores/store';\r\nimport LoadingComponent from './LoadingComponent';\r\nimport ModalContainer from '../common/modals/ModalContainer';\r\nimport PrivateRoute from '../layout/PrivateRoute';\r\n\r\nfunction App() {\r\n  const location = useLocation();\r\n  const { commonStore, userStore } = useStore();\r\n\r\n  useEffect(() => {\r\n    if (commonStore.token) {\r\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\r\n    } else {\r\n      userStore.getFacebookLoginStatus().then(() => commonStore.setAppLoaded());\r\n    }\r\n  }, [commonStore, userStore])\r\n\r\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\r\n\r\n  return (\r\n    <>\r\n      <ToastContainer position='bottom-right' hideProgressBar />\r\n      <ModalContainer />\r\n      <Route path='/' exact component={HomePage} />\r\n      <Route\r\n        path={'/(.+)'}\r\n        render={() => (\r\n          <>\r\n            <NavBar />\r\n            <Container style={{ marginTop: '7em' }}>\r\n              <Switch>\r\n                <PrivateRoute path='/activities' exact component={ActivityDashboard} />\r\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\r\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\r\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\r\n                <PrivateRoute path='/errors' component={TestErrors} />\r\n                <Route path='/server-error' component={ServerError} />\r\n                <Route component={NotFound} />\r\n              </Switch>\r\n            </Container>\r\n          </>\r\n        )}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default observer(App);\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nexport default function ScrollToTop() {\r\n    const { pathname } = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './app/layout/styles.css';\r\nimport App from './app/layout/App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport 'semantic-ui-css/semantic.min.css';\r\nimport 'react-calendar/dist/Calendar.css';\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport 'react-toastify/dist/ReactToastify.min.css';\r\nimport { store, StoreContext } from './app/stores/store';\r\nimport { Router } from 'react-router-dom';\r\nimport { createBrowserHistory } from 'history';\r\nimport ScrollToTop from './app/layout/ScrollToTop';\r\n\r\nexport const history = createBrowserHistory();\r\n\r\nReactDOM.render(\r\n  <StoreContext.Provider value={store}>\r\n    <Router history={history}>\r\n      <ScrollToTop />\r\n      <App />\r\n    </Router>\r\n  </StoreContext.Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}