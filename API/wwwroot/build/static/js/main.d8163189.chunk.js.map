{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/userStore.ts","app/stores/ProfileStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/details/ActivityFilters.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/form/MyDateInput.tsx","app/common/options/categoryOptions.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/profiles/ProfileHeader.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileEditForm.tsx","features/profiles/ProfileAbout.tsx","features/profiles/ProfileFollowings.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfilePage.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","profile","userName","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","title","date","description","category","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","undefined","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParams","result","setActivity","setPagination","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","x","isHost","hostUserName","host","find","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendee","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followingsCount","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","setImage","setDisplayName","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","UserActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","p","updateProfile","activityStore","loadFollowings","loadUserActivities","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","MyTextInput","props","useField","field","meta","Form","Field","touched","label","Label","basic","color","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","Header","textAlign","placeholder","type","render","marginBotton","fluid","ValidationErrors","Message","List","map","err","i","validationSchema","Yup","required","isValid","dirty","disabled","Segment","vertical","size","marginBottom","isLoggedIn","Reveal","animated","Content","visible","width","hidden","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","horizontal","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Group","attached","secondary","clearing","floated","groupedActivities","group","sub","marginTop","active","has","onChange","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","Loader","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","MyDateInput","selected","CategoryOptions","useHistory","useParams","SetActivity","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","Top","ribbon","verticalAlign","length","relaxed","divided","Extra","StatisticGroup","Statistic","Divider","PhotoWidgetDropzone","setFiles","dzStyles","borderRaduis","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","widths","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","Tab","Pane","itemsPerRow","currentTarget","handleSetMainPhoto","handleDeletePhoto","bio","ProfileAbout","setEditMode","panes","menuItem","pane","menu","onTabChange","activeIndex","handleTabChange","userActivity","objectFit","Meta","ProfileActivities","menuPosition","TestErrors","baseUrl","primary","NotFound","Inline","message","Modal","onClose","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"2XAOaA,EAIT,WAAYC,EAASC,GAAyB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA2C,IAA/BC,EAA8B,uDAAjB,EAAGC,EAAc,uDAAH,EAAG,yBAH1CD,WAAa,EAG6B,KAF1CC,SAAW,EAGPH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCRxBC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAGhC,OAFIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAE7CD,KAGXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAEtBnB,EAAakB,EAASF,QAAT,YAFS,uBAKxBE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IALtC,kBAMjBkB,GANiB,gCASrBA,GATqB,2CAAhC,uDAUG,SAACI,GAAuB,IAAD,EACtB,EAAiCA,EAAMJ,SAA/BnB,EAAR,EAAQA,KAAMwB,EAAd,EAAcA,OAAQX,EAAtB,EAAsBA,OACtB,OAAQW,GACJ,KAAK,IAOD,GANoB,kBAATxB,GACPyB,IAAMF,MAAMvB,GAEM,QAAlBa,EAAOa,SAAP,UAA2B1B,EAAK2B,cAAhC,aAA2B,EAAaC,eAAe,QACvDC,GAAQC,KAAK,cAEb9B,EAAK2B,OAAQ,CACb,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAOhC,EAAK2B,OACf3B,EAAK2B,OAAOK,IACZD,EAAiBD,KAAK9B,EAAK2B,OAAOK,IAG1C,MAAMD,EAAiBE,OAE3B,MACJ,KAAK,IACDR,IAAMF,MAAM,gBACZ,MACJ,KAAK,IACDM,GAAQC,KAAK,cACb,MACJ,KAAK,IACDf,EAAMC,YAAYkB,eAAelC,GACjC6B,GAAQC,KAAK,iBAGrB,OAAOK,QAAQC,OAAOb,MAG1B,IAAMc,EAAe,SAAIlB,GAAJ,OAAmCA,EAASnB,MAE3DsC,EACG,SAAIC,GAAJ,OAAoBjC,IAAMkC,IAAOD,GAAKE,KAAKJ,IAD9CC,EAEI,SAAIC,EAAaG,GAAjB,OAA8BpC,IAAMqC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFhEC,EAGG,SAAIC,EAAaG,GAAjB,OAA8BpC,IAAMsC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH9DC,EAIM,SAAIC,GAAJ,OAAoBjC,IAAMuC,OAAUN,GAAKE,KAAKJ,IA2C3CS,EAND,CACVC,WAnCe,CACfC,KAAM,SAACC,GAAD,OAA6B3C,IAAMkC,IAAiC,cAAe,CAAES,WAAUR,KAAKJ,IAC1Ga,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAoB,cAAee,IAC7EC,OAAQ,SAACD,GAAD,OAAkCf,EAAA,sBAAkCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAqCa,KAC7DI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,sBAAmCa,EAAnC,WAAgD,MA8BxEK,QA3BY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAqBqB,KAyB7EE,SAtBa,CACbrB,IAAK,SAACsB,GAAD,OAAsBxB,EAAA,oBAAmCwB,KAC9DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB1D,IAAMqC,KAAY,SAAUsB,EAAU,CACzChD,QAAS,CAAE,eAAgB,0BAGnCmD,aAAc,SAACjB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAuC,KACrEkB,YAAa,SAAClB,GAAD,OAAgBb,EAAA,kBAA2Ba,KACxDG,OAAQ,SAACgB,GAAD,OAA+BhC,EAAA,oBAAgCgC,EAAQC,UAAYD,IAC3FE,gBAAiB,SAACV,GAAD,OAAsBxB,EAAA,kBAAyBwB,GAAY,KAC5EW,eAAgB,SAACX,EAAkBY,GAAnB,OACZpC,EAAA,kBAAmCwB,EAAnC,sBAAyDY,KAC7DC,eAAgB,SAACb,EAAkBY,GAAnB,OACZpC,EAAA,oBAA0CwB,EAA1C,iCAA2EY,OC1FtEE,EACX,WAAYC,GAA4B,oBACtCC,OAAOC,OAAO7E,KAAM2E,IAIXG,EASX,WAAY3B,GAAgC,yBAR5CF,GAAa,GAQ8B,KAP3C8B,MAAgB,GAO2B,KAN3CC,KAAoB,KAMuB,KAL3CC,YAAsB,GAKqB,KAJ3CC,SAAmB,GAIwB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGVjC,IACFnD,KAAKiD,GAAKE,EAASF,GACnBjD,KAAK+E,MAAQ5B,EAAS4B,MACtB/E,KAAKgF,KAAO7B,EAAS6B,KACrBhF,KAAKiF,YAAc9B,EAAS8B,YAC5BjF,KAAKkF,SAAW/B,EAAS+B,SACzBlF,KAAKmF,KAAOhC,EAASgC,KACrBnF,KAAKoF,MAAQjC,EAASiC,Q,SC5BfC,EACT,WAAY5B,GAAa,oBACrBzD,KAAKqE,SAAWZ,EAAKY,SACrBrE,KAAKsF,YAAc7B,EAAK6B,YACxBtF,KAAKuF,MAAQ9B,EAAK8B,OCTLC,E,WAUjB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,sBAAyCC,EAQ3B,KAPdC,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,gBAAiB,EAKH,KAJdhG,WAAgC,KAIlB,KAHdiG,aAAe,IAAI/F,EAGL,KAFduE,WAAY,IAAIkB,KAAMO,IAAI,OAAO,GAEnB,KAadC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAdV,KAiBdG,aAAe,SAAC3B,EAAmB4B,GAC/B,IAAMC,EAAiB,WACnB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAOtE,GACf,cAARA,GAAqB,EAAK0C,UAAU7B,OAAOb,OAIvD,OAAQ0C,GACJ,IAAK,MACD6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAKzB,UAAU7B,OAAO6B,GACtB,EAAKA,UAAUyB,IAAIzB,EAAW4B,KAvC5B,KA2EdG,eA3Ec,sBA2EG,4BAAArF,EAAA,6DACb,EAAKsF,mBAAkB,GADV,kBAGY5D,EAAMC,WAAWC,KAAK,EAAK2D,aAHvC,QAGHC,EAHG,QAKF5G,KAAKwG,SAAQ,SAAAnD,GAChB,EAAKwD,YAAYxD,MAErB,EAAKyD,cAAcF,EAAO3G,YAC1B,EAAKyG,mBAAkB,GATd,kDAWTK,QAAQC,IAAR,MACA,EAAKN,mBAAkB,GAZd,0DA3EH,KA2FdI,cAAgB,SAAC7G,GACb,EAAKA,WAAaA,GA5FR,KA+FdgH,aA/Fc,uCA+FC,WAAO9D,GAAP,eAAA/B,EAAA,2DACPiC,EAAW,EAAK6D,YAAY/D,IADrB,gBAGP,EAAK0C,iBAAmBxC,EAHjB,8BAKP,EAAK4C,gBAAiB,EALf,kBAOcnD,EAAMC,WAAWG,QAAQC,GAPvC,OAOHE,EAPG,OAQH,EAAKwD,YAAYxD,GACjB8D,aAAY,WACR,EAAKtB,iBAAmBxC,KAE5B,EAAKqD,mBAAkB,GAZpB,kDAcHK,QAAQC,IAAR,MACA,EAAKN,mBAAkB,GAfpB,iCAkBJrD,GAlBI,0DA/FD,2DAoHNwD,YAAc,SAACxD,GACnB,IACU,EADJM,EAAO5C,EAAMqG,UAAUzD,KACzBA,IACAN,EAASgE,QAAUhE,EAASiE,UAAWC,MACnC,SAAAC,GAAC,OAAIA,EAAEjD,WAAaZ,EAAKY,YAE7BlB,EAASoE,OAASpE,EAASqE,eAAiB/D,EAAKY,SACjDlB,EAASsE,KAAT,UAAgBtE,EAASiE,iBAAzB,aAAgB,EAAoBM,MAAK,SAAAJ,GAAC,OAAIA,EAAEjD,WAAalB,EAASqE,iBAE1ErE,EAAS6B,KAAO,IAAI2C,KAAKxE,EAAS6B,MAClC,EAAKS,iBAAiBQ,IAAI9C,EAASF,GAAIE,IA9H7B,KAiIN6D,YAAc,SAAC/D,GACnB,OAAO,EAAKwC,iBAAiBnD,IAAIW,IAlIvB,KAqIduD,kBAAoB,SAACoB,GACjB,EAAK7B,eAAiB6B,GAtIZ,KAyIdC,eAzIc,uCAyIG,WAAO1E,GAAP,mBAAAjC,EAAA,6DACPuC,EAAO5C,EAAMqG,UAAUzD,KACvBqE,EAAW,IAAIzC,EAAQ5B,GAFhB,kBAIHb,EAAMC,WAAWK,OAAOC,GAJrB,QAKH4E,EAAc,IAAIrD,EAASvB,IACrBqE,aAAe/D,EAAMY,SACjC0D,EAAYX,UAAY,CAACU,GACzB,EAAKnB,YAAYoB,GACjBd,aAAY,WACR,EAAKtB,iBAAmBoC,KAVnB,kDAaTlB,QAAQC,IAAR,MAbS,0DAzIH,2DA0JdkB,eA1Jc,uCA0JG,WAAO7E,GAAP,SAAAjC,EAAA,+EAEH0B,EAAMC,WAAWO,OAAOD,GAFrB,OAGT8D,aAAY,WACR,GAAI9D,EAASF,GAAI,CACb,IAAIgF,EAAe,2BAAQ,EAAKjB,YAAY7D,EAASF,KAAQE,GAC7D,EAAKsC,iBAAiBQ,IAAI9C,EAASF,GAAIgF,GACvC,EAAKtC,iBAAmBsC,MAPvB,+CAWTpB,QAAQC,IAAR,MAXS,wDA1JH,2DAyKdoB,eAzKc,uCAyKG,WAAOjF,GAAP,SAAA/B,EAAA,6DACb,EAAK4E,SAAU,EADF,kBAGHlD,EAAMC,WAAWF,OAAOM,GAHrB,OAITgE,aAAY,WACR,EAAKxB,iBAAiB9C,OAAOM,GAC7B,EAAK6C,SAAU,KANV,gDASTe,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKnB,SAAU,KAXV,yDAzKH,2DAyLdqC,eAzLc,sBAyLG,4BAAAjH,EAAA,6DACPuC,EAAO5C,EAAMqG,UAAUzD,KAC7B,EAAKqC,SAAU,EAFF,kBAKHlD,EAAMC,WAAWQ,OAAO,EAAKsC,iBAAkB1C,IAL5C,OAMTgE,aAAY,WAAO,IAAD,EACd,aAAI,EAAKtB,wBAAT,aAAI,EAAuBwB,QAAS,CAAC,IAAD,EAChC,EAAKxB,iBAAiByB,UAAtB,UACI,EAAKzB,iBAAiByB,iBAD1B,aACI,EAAiCgB,QAAO,SAAAlH,GAAC,OAAIA,EAAEmD,YAAF,OAAeZ,QAAf,IAAeA,OAAf,EAAeA,EAAMY,aACtE,EAAKsB,iBAAiBwB,SAAU,MAC7B,CAAC,IAAD,IACGW,EAAW,IAAIzC,EAAQ5B,GAC7B,YAAKkC,wBAAL,mBAAuByB,iBAAvB,SAAkCxF,KAAKkG,GACvC,EAAKnC,iBAAkBwB,SAAU,EAErC,EAAK1B,iBAAiBQ,IAAI,EAAKN,iBAAkB1C,GAAI,EAAK0C,qBAhBrD,gDAmBTkB,QAAQC,IAAR,MAnBS,yBAqBTG,aAAY,WAAQ,EAAKnB,SAAU,KArB1B,4EAzLH,KAkNduC,qBAlNc,sBAkNS,sBAAAnH,EAAA,6DACnB,EAAK4E,SAAU,EADI,kBAITlD,EAAMC,WAAWQ,OAAO,EAAKsC,iBAAkB1C,IAJtC,OAKfgE,aAAY,WAAO,IAAD,EACd,EAAKtB,iBAAkB2C,cAAc,UAAC,EAAK3C,wBAAN,aAAC,EAAuB2C,aAC7D,EAAK7C,iBAAiBQ,IAAI,EAAKN,iBAAkB1C,GAAI,EAAK0C,qBAP/C,gDAUfkB,QAAQC,IAAR,MAVe,yBAYfG,aAAY,WAAQ,EAAKnB,SAAU,KAZpB,4EAlNT,KAkOdyC,sBAAwB,WACpB,EAAK5C,sBAAmBC,GAnOd,KAsOd4C,wBAA0B,SAAC5E,GACvB,EAAK6B,iBAAiBa,SAAQ,SAAAnD,GAAa,IAAD,EACtC,UAAAA,EAASiE,iBAAT,SAAoBd,SAAQ,SAAAwB,GACpBA,EAASzD,WAAaT,IACtBkE,EAASW,UAAYX,EAASY,kBAAoBZ,EAASa,iBAC3Db,EAASW,WAAaX,EAASW,kBA1O3CG,YAAmB5I,MAEnB6I,aACI,kBAAM,EAAKrE,UAAUsE,UACrB,WACI,EAAK9C,aAAe,IAAI/F,EACxB,EAAKwF,iBAAiBsD,QACtB,EAAKxC,oB,6CAoCjB,WACI,IAAMxD,EAAS,IAAIiG,gBAYnB,OAVAjG,EAAOkB,OAAO,aAAcjE,KAAKgG,aAAa9F,WAAW+I,YACzDlG,EAAOkB,OAAO,WAAYjE,KAAKgG,aAAa7F,SAAS8I,YACrDjJ,KAAKwE,UAAU8B,SAAQ,SAACF,EAAOtE,GACf,cAARA,EACAiB,EAAOkB,OAAOnC,EAAMsE,EAAe8C,eAEnCnG,EAAOkB,OAAOnC,EAAKsE,MAIpBrD,I,4BAGX,WACI,OAAOoG,MAAMC,KAAKpJ,KAAKyF,iBAAiB4D,UAAUC,MAAK,SAACpI,EAAGqI,GAAJ,OACnDrI,EAAE8D,KAAMwE,UAAYD,EAAEvE,KAAMwE,e,6BAGpC,WACI,OAAO5E,OAAO6E,QACVzJ,KAAK0J,iBAAiBC,QAAO,SAACC,EAAYzG,GACtC,IAAM6B,EAAO6E,kBAAO1G,EAAS6B,KAAO,eAEpC,OADA4E,EAAW5E,GAAQ4E,EAAW5E,GAAX,sBAAuB4E,EAAW5E,IAAlC,CAAyC7B,IAAY,CAACA,GAClEyG,IACR,S,KCnFME,E,WAGjB,aAAe,IAAD,gCAFdrG,KAAoB,KAEN,KAQdD,MARc,uCAQN,WAAOuG,GAAP,eAAA7I,EAAA,+EAEmB0B,EAAMU,QAAQE,MAAMuG,GAFvC,OAEMtG,EAFN,OAGA5C,EAAMC,YAAYkJ,SAASvG,EAAK7C,OAChCqG,aAAY,kBAAM,EAAKxD,KAAOA,KAC9B9B,GAAQC,KAAK,eACbf,EAAMoJ,WAAWC,aANjB,uHARM,2DAoBdC,OAAS,WACLtJ,EAAMC,YAAYkJ,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAK7G,KAAO,KACZ9B,GAAQC,KAAK,MAxBH,KA2Bd2I,QA3Bc,sBA2BJ,4BAAArJ,EAAA,+EAEiB0B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGFwD,aAAY,kBAAM,EAAKxD,KAAOA,KAH5B,gDAKFoD,QAAQC,IAAR,MALE,yDA3BI,KAoCdpD,SApCc,uCAoCH,WAAOqG,GAAP,eAAA7I,EAAA,+EAEgB0B,EAAMU,QAAQI,SAASqG,GAFvC,OAEGtG,EAFH,OAGH5C,EAAMC,YAAYkJ,SAASvG,EAAK7C,OAChCqG,aAAY,kBAAM,EAAKxD,KAAOA,KAC9B9B,GAAQC,KAAK,eACbf,EAAMoJ,WAAWC,aANd,uHApCG,2DAgDdM,SAAW,SAACjF,GACJ,EAAK9B,OAAM,EAAKA,KAAK8B,MAAQA,IAjDvB,KAoDdkF,eAAiB,SAACnF,GACV,EAAK7B,OAAM,EAAKA,KAAK6B,YAAcA,IApDvCsD,YAAmB5I,M,4CAGvB,WACI,QAASA,KAAKyD,S,KCRDiH,E,WAWjB,aAAe,IAAD,gCAVdtG,QAA0B,KAUZ,KATduG,gBAAiB,EASH,KARdC,WAAY,EAQE,KAPd9E,SAAU,EAOI,KANd+E,WAAwB,GAMV,KALdC,mBAAoB,EAKN,KAJdC,UAAY,EAIE,KAHdC,eAAiC,GAGnB,KAFdC,mBAAoB,EAEN,KAgBdC,aAAe,SAACH,GACZ,EAAKA,UAAYA,GAjBP,KA4BdI,YA5Bc,uCA4BA,WAAOvH,GAAP,eAAA1C,EAAA,6DACV,EAAKyJ,gBAAiB,EADZ,kBAIgB/H,EAAMe,SAASrB,IAAIsB,GAJnC,OAIAQ,EAJA,OAKN6C,aAAY,WACR,EAAK7C,QAAUA,EACf,EAAKuG,gBAAiB,KAPpB,gDAUN9D,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK0D,gBAAiB,KAXlC,yDA5BA,2DA2Cd9G,YA3Cc,uCA2CA,WAAOC,GAAP,iBAAA5C,EAAA,6DACV,EAAK0J,WAAY,EADP,kBAIiBhI,EAAMe,SAASE,YAAYC,GAJ5C,OAIA7C,EAJA,OAKAmK,EAAQnK,EAASnB,KAEvBmH,aAAY,WACW,IAAD,EAAd,EAAK7C,UACL,YAAKA,QAAQiH,cAAb,SAAqBzJ,KAAKwJ,GACtBA,EAAME,QAAUzK,EAAMqG,UAAUzD,OAChC5C,EAAMqG,UAAUsD,SAASY,EAAM/I,KAC/B,EAAK+B,QAAQmB,MAAQ6F,EAAM/I,MAGnC,EAAKuI,WAAY,KAff,gDAkBN/D,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK2D,WAAY,KAnB7B,yDA3CA,2DAkEd1G,aAlEc,uCAkEC,WAAOkH,GAAP,SAAAlK,EAAA,6DACX,EAAK4E,SAAU,EADJ,kBAIDlD,EAAMe,SAASO,aAAakH,EAAMnI,IAJjC,OAKPpC,EAAMqG,UAAUsD,SAASY,EAAM/I,KAC/B4E,aAAY,WACJ,EAAK7C,SAAW,EAAKA,QAAQiH,SAC7B,EAAKjH,QAAQiH,OAAO3D,MAAK,SAAA6D,GAAC,OAAIA,EAAED,UAASA,QAAS,EAClD,EAAKlH,QAAQiH,OAAO3D,MAAK,SAAA6D,GAAC,OAAIA,EAAEtI,KAAOmI,EAAMnI,MAAKqI,QAAS,EAC3D,EAAKlH,QAAQmB,MAAQ6F,EAAM/I,IAC3B,EAAKyD,SAAU,MAXhB,gDAePe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAhB1B,yDAlED,2DAsFd3B,YAtFc,uCAsFA,WAAOiH,GAAP,SAAAlK,EAAA,6DACV,EAAK4E,SAAU,EADL,kBAIAlD,EAAMe,SAASQ,YAAYiH,EAAMnI,IAJjC,OAMNgE,aAAY,WACkC,IAAD,EAArC,EAAK7C,SAAW,EAAKA,QAAQiH,SAC7B,EAAKjH,QAAQiH,OAAb,UAAsB,EAAKjH,QAAQiH,cAAnC,aAAsB,EAAqBjD,QAAO,SAAAmD,GAAC,OAAIA,EAAEtI,KAAOmI,EAAMnI,MACtE,EAAK6C,SAAU,MATjB,gDAaNe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAd3B,yDAtFA,2DAwGd0F,cAxGc,uCAwGE,WAAOpH,GAAP,SAAAlD,EAAA,6DACZ,EAAK4E,SAAU,EADH,kBAIFlD,EAAMe,SAASP,OAAOgB,GAJpB,OAKR6C,aAAY,WAAO,IAAD,EACV7C,EAAQkB,aACRlB,EAAQkB,eAAR,UAAwBzE,EAAMqG,UAAUzD,YAAxC,aAAwB,EAAsB6B,cAC9CzE,EAAMqG,UAAUuD,eAAerG,EAAQkB,aAE3C,EAAKQ,SAAU,KAVX,gDAaRe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAdzB,yDAxGF,2DA0HdxB,gBA1Hc,uCA0HI,WAAOV,EAAkB6E,GAAzB,SAAAvH,EAAA,6DACd,EAAK4E,SAAU,EADD,kBAIJlD,EAAMe,SAASW,gBAAgBV,GAJ3B,OAKV/C,EAAM4K,cAAcjD,wBAAwB5E,GAC5CqD,aAAY,WAAO,IAAD,IACV,EAAK7C,SAAW,EAAKA,QAAQC,YAAb,UAA0BxD,EAAMqG,UAAUzD,YAA1C,aAA0B,EAAsBY,WAChE,EAAKD,QAAQC,WAAaT,IAC1B6E,EAAY,EAAKrE,QAAQuE,iBAAmB,EAAKvE,QAAQuE,iBACzD,EAAKvE,QAAQqE,WAAa,EAAKrE,QAAQqE,WAEvC,EAAKrE,SAAW,EAAKA,QAAQC,YAAb,UAA0BxD,EAAMqG,UAAUzD,YAA1C,aAA0B,EAAsBY,YAChEoE,EAAY,EAAKrE,QAAQsE,kBAAoB,EAAKtE,QAAQsE,mBAE9D,EAAKmC,WAAWvE,SAAQ,SAAAlC,GAChBA,EAAQC,WAAaT,IACrBQ,EAAQqE,UAAYrE,EAAQuE,iBAAmBvE,EAAQuE,iBACvDvE,EAAQqE,WAAarE,EAAQqE,cAGrC,EAAK3C,SAAU,KArBT,gDAwBVe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAzBvB,yDA1HJ,6DAuJd4F,eAvJc,uCAuJG,WAAOlH,GAAP,eAAAtD,EAAA,6DACb,EAAK4J,mBAAoB,EADZ,kBAIgBlI,EAAMe,SAASY,eAAe,EAAKH,QAASC,SAAUG,GAJtE,OAIHqG,EAJG,OAKT5D,aAAY,WACR,EAAK4D,WAAaA,EAClB,EAAKC,mBAAoB,KAPpB,gDAUTjE,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK6D,mBAAoB,KAXlC,yDAvJH,2DAsKda,mBAtKc,uCAsKO,WAAO/H,EAAkBY,GAAzB,eAAAtD,EAAA,6DACjB,EAAK+J,mBAAoB,EADR,kBAIYrI,EAAMe,SAASc,eAAeb,EAAUY,GAJpD,OAIPoF,EAJO,OAKb3C,aAAY,WACR,EAAK+D,eAAiBpB,EACtB,EAAKqB,mBAAoB,KAPhB,gDAUbpE,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKgE,mBAAoB,KAX9B,yDAtKP,wDACVrC,YAAmB5I,MAEnB6I,aACI,kBAAM,EAAKkC,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAMvG,EAA0B,IAAduG,EAAkB,YAAc,YAClD,EAAKW,eAAelH,QAEpB,EAAKqG,WAAa,M,+CAUlC,WACI,SAAIhK,EAAMqG,UAAUzD,OAAQzD,KAAKoE,UACtBvD,EAAMqG,UAAUzD,KAAKY,WAAarE,KAAKoE,QAAQC,a,cCtBrDxD,EAAe,CACxB4K,cAAe,IAAIjG,EACnB1E,YAAa,ICXb,aAAe,IAAD,gCAJdO,MAA4B,KAId,KAHdT,MAAuBwJ,OAAOC,aAAauB,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAed7J,eAAiB,SAACX,GACd,EAAKA,MAAQA,GAhBH,KAmBd2I,SAAW,SAACpJ,GACR,EAAKA,MAAQA,GApBH,KAuBdkL,aAAe,WACX,EAAKD,WAAY,GAvBjBjD,YAAmB5I,MAEnB6I,aACI,kBAAM,EAAKjI,SACX,SAAAA,GACQA,EACAwJ,OAAOC,aAAa0B,QAAQ,MAAOnL,GAEnCwJ,OAAOC,aAAaC,WAAW,WDG/CpD,UAAW,IAAI4C,EACfG,WAAY,IEPZ,aAAe,IAAD,gCALd+B,MAAe,CACXC,MAAM,EACNzJ,KAAM,MAGI,KAId0J,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMxJ,KAAO2J,GANR,KASdjC,WAAa,WACT,EAAK8B,MAAMC,MAAO,EAClB,EAAKD,MAAMxJ,KAAO,MAVlBoG,YAAmB5I,OFOvBoM,aAAc,IAAI1B,EAClB2B,aAAc,IGbd,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACf5L,EAAM4K,cAAc9F,mBACpB,EAAK4G,eAAgB,IAAIG,KACpBC,QAAQpM,oBAAkDkM,EAAY,CACnEG,mBAAoB,kCAAM/L,EAAMqG,UAAUzD,YAAtB,aAAM,EAAsB7C,SAEnDiM,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cAAcW,QAAQC,OAAM,SAAA9L,GAAK,OAAIwF,QAAQC,IAAI,sCAAuCzF,MAE7F,EAAKkL,cAAca,GAAG,gBAAgB,SAACd,GACnCrF,aAAY,WACRqF,EAAShG,SAAQ,SAAA+G,GACbA,EAAQC,UAAY,IAAI3F,KAAK0F,EAAQC,UAAY,QAErD,EAAKhB,SAAWA,QAIxB,EAAKC,cAAca,GAAG,kBAAkB,SAACC,GACrCpG,aAAY,WACRoG,EAAQC,UAAY,IAAI3F,KAAK0F,EAAQC,WACrC,EAAKhB,SAASiB,QAAQF,WA5BxB,KAkCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKjB,qBAAL,SAAoBkB,OAAON,OAAM,SAAA9L,GAAK,OAAIwF,QAAQC,IAAI,4BAA6BzF,OAnCzE,KAsCdqM,cAAgB,WACZ,EAAKpB,SAAW,GAChB,EAAKkB,qBAxCK,KA2CdG,WA3Cc,uCA2CD,WAAOtE,GAAP,iBAAAnI,EAAA,sDACTmI,EAAOoD,WAAP,UAAoB5L,EAAM4K,cAAc9F,wBAAxC,aAAoB,EAAsC1C,GAE1D,IACI,YAAKsJ,qBAAL,SAAoBqB,OAAO,cAAevE,GAC5C,MAAOhI,GACLwF,QAAQC,IAAIzF,GANP,2CA3CC,sDACVuH,YAAmB5I,QHed6N,EAAeC,wBAAcjN,GAEnC,SAASkN,IACZ,OAAOC,qBAAWH,G,WIvBPI,eAAS,WACpB,MAAwCF,IAAhC7G,UAAazD,EAArB,EAAqBA,KAAM0G,EAA3B,EAA2BA,OAC3B,OACI,cAAC+D,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,OAAK,EAACC,QAAM,EAA3C,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,UADjE,kBAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,cAAcO,KAAK,cAC9C,cAACd,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAUO,KAAK,WAC1C,cAACd,EAAA,EAAKI,KAAN,UACI,cAACW,EAAA,EAAD,CAAQC,UAAQ,EAAC/C,QAAQ,kBACrBoC,GAAIC,IAASC,GAAG,sBAExB,eAACP,EAAA,EAAKI,KAAN,CAAWa,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOR,KAAS,OAAJnL,QAAI,IAAJA,OAAA,EAAAA,EAAM8B,QAAS,mBAAoB8J,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAEhM,QAAF,IAAEA,OAAF,EAAEA,EAAM6B,YAA1C,SACI,eAACiK,EAAA,EAASrB,KAAV,WACI,cAACqB,EAAA,EAASjB,KAAV,CAAeC,GAAImB,IAAMjB,GAAE,2BAAehL,QAAf,IAAeA,OAAf,EAAeA,EAAMY,UAAYoL,KAAK,aAAaE,KAAK,SACnF,cAACJ,EAAA,EAASjB,KAAV,CAAesB,QAASzF,EAAQsF,KAAK,SAASE,KAAK,0B,oDCfhE,SAASE,EAAYC,GAChC,MAAsBC,YAASD,EAAMd,MAArC,mBAAOgB,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,EAAA,EAAKC,MAAN,CAAY9O,MAAO4O,EAAKG,WAAaH,EAAK5O,MAA1C,UACI,gCAAQyO,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAK5O,MAClB,cAACiP,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAK5O,QAC/B,QCbD4M,mBAAS,WACpB,IAAQ/G,EAAc6G,IAAd7G,UACR,OACI,cAAC,IAAD,CACIuJ,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAItP,MAAO,MACjDuP,SAAU,SAACvH,EAAD,OAAWwH,EAAX,EAAWA,UAAX,OAA2B3J,EAAU1D,MAAM6F,GAAQ8D,OAAM,SAAA9L,GAAK,OACpEwP,EAAU,CAAExP,MAAO,kCAH3B,SAKK,gBAAGyP,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAActP,EAA/B,EAA+BA,OAA/B,OACG,eAAC,IAAD,CAAMuP,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACC,EAAA,EAAD,CAAQ3C,GAAG,KAAKpC,QAAQ,wBAAwBqE,MAAM,OAAOW,UAAU,WACvE,cAACtB,EAAD,CAAab,KAAK,QAAQoC,YAAY,UACtC,cAACvB,EAAD,CAAab,KAAK,WAAWoC,YAAY,WAAWC,KAAK,aACzD,cAAC,IAAD,CACIrC,KAAK,QAAQsC,OAAQ,kBACjB,cAAChB,EAAA,EAAD,CAAOxB,MAAO,CAAEyC,aAAc,IAAMhB,OAAK,EAACC,MAAM,MAAMrE,QAAS1K,EAAOJ,WAE9E,cAAC4N,EAAA,EAAD,CAAQnJ,QAASiL,EAAc7B,UAAQ,EAAC/C,QAAQ,QAAQkF,KAAK,SAASG,OAAK,a,mBCjBhF,SAASC,GAAT,GAA8C,IAAlBhQ,EAAiB,EAAjBA,OACvC,OACI,cAACiQ,GAAA,EAAD,CAASrQ,OAAK,EAAd,SACKI,GACG,cAACiQ,GAAA,EAAQC,KAAT,UACKlQ,EAAOmQ,KAAI,SAACC,EAAUC,GAAX,OACR,cAACJ,GAAA,EAAQpD,KAAT,UAAuBuD,GAAJC,UCJ5B7D,oBAAS,WACpB,IAAQ/G,EAAc6G,IAAd7G,UAEF6K,EAAmBC,KAAW,CAChC1M,YAAa0M,OAAaC,WAC1B5N,SAAU2N,OAAaC,WACvBvB,MAAOsB,OAAaC,WAAWvB,QAC/BC,SAAUqB,OAAaC,aAG3B,OACI,cAAC,IAAD,CACIxB,cAAe,CAAEnL,YAAa,GAAIjB,SAAU,GAAIqM,MAAO,GAAIC,SAAU,GAAItP,MAAO,MAChFuP,SAAU,SAACvH,EAAD,OAAWwH,EAAX,EAAWA,UAAX,OAA2B3J,EAAUxD,SAAS2F,GAAQ8D,OAAM,SAAA9L,GAAK,OACvEwP,EAAU,CAAExP,cAChB0Q,iBAAkBA,EAJtB,SAMK,gBAAGjB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAActP,EAA/B,EAA+BA,OAAQyQ,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACG,eAAC,IAAD,CAAMnB,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAACC,EAAA,EAAD,CAAQ3C,GAAG,KAAKpC,QAAQ,0BAA0BqE,MAAM,OAAOW,UAAU,WACzE,cAACtB,EAAD,CAAab,KAAK,cAAcoC,YAAY,iBAC5C,cAACvB,EAAD,CAAab,KAAK,WAAWoC,YAAY,aACzC,cAACvB,EAAD,CAAab,KAAK,QAAQoC,YAAY,UACtC,cAACvB,EAAD,CAAab,KAAK,WAAWoC,YAAY,WAAWC,KAAK,aACzD,cAAC,IAAD,CACIrC,KAAK,QAAQsC,OAAQ,kBACjB,cAACG,GAAD,CAAkBhQ,OAAQA,EAAOJ,WAEzC,cAAC4N,EAAA,EAAD,CACImD,SAAUrB,IAAiBmB,IAAYC,EACvCrM,QAASiL,EAAc7B,UAAQ,EAAC/C,QAAQ,WAAWkF,KAAK,SAASG,OAAK,aC/B/EvD,gBAAS,WACpB,MAAkCF,IAA1B7G,EAAR,EAAQA,UAAW+C,EAAnB,EAAmBA,WACnB,OACI,cAACoI,EAAA,EAAD,CAASlE,UAAQ,EAACgD,UAAU,SAASmB,UAAQ,EAACtB,UAAU,WAAxD,SACI,eAAC3C,EAAA,EAAD,CAAWoB,MAAI,EAAf,UACI,eAACyB,EAAA,EAAD,CAAQ3C,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACiB,EAAA,EAAD,CAAOmD,KAAK,UAAU3D,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAE0D,aAAc,MADnF,kBAICtL,EAAUuL,WACP,qCACI,cAACvB,EAAA,EAAD,CAAQ3C,GAAG,KAAKJ,UAAQ,EAAChC,QAAQ,4BACjC,cAAC8C,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAc8D,KAAK,OAAOpE,UAAQ,EAAvD,kCAKJ,qCACI,cAACc,EAAA,EAAD,CAAQW,QAAS,kBAAM3F,EAAWiC,UAAU,cAAC,EAAD,MAAgBqG,KAAK,OAAOpE,UAAQ,EAAhF,oBAGA,cAACc,EAAA,EAAD,CAAQW,QAAS,kBAAM3F,EAAWiC,UAAU,cAAC,GAAD,MAAmBqG,KAAK,OAAOpE,UAAQ,EAAnF,kC,+ECnBTF,gBAAS,YAA2C,IAAD,EAAlB7J,EAAkB,EAAlBA,QAC5C,EAAoC2J,IAA5B3B,EAAR,EAAQA,aAAclF,EAAtB,EAAsBA,UACd5C,EAA6B8H,EAA7B9H,gBAA6B8H,EAAZtG,QAEzB,IAAI,UAAAoB,EAAUzD,YAAV,eAAgBY,YAAaD,EAAQC,SAAU,OAAO,KAO1D,OACI,eAACqO,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAC/D,MAAO,CAAEgE,MAAO,QAAxC,SACI,cAAC7D,EAAA,EAAD,CACIuC,OAAK,EACLhB,MAAM,OACNrE,QAAS/H,EAAQqE,UAAY,YAAc,oBAEnD,cAACiK,GAAA,EAAOE,QAAR,CAAgBG,QAAM,EAACjE,MAAO,CAAEgE,MAAO,QAAvC,SACI,cAAC7D,EAAA,EAAD,CACIuC,OAAK,EACLjB,OAAK,EACLC,MAAOpM,EAAQqE,UAAY,MAAQ,QACnC0D,QAAS/H,EAAQqE,UAAY,WAAa,SAC1CmH,QAAS,SAAAoD,GAAC,OAnB1B,SAAsBA,GAClBA,EAAEC,iBACF3O,EAAgBF,EAAQC,UAAWD,EAAQqE,WAiBjByK,CAAaF,cCzBhC/E,gBAAS,YAA0C,IAAnB7J,EAAkB,EAAlBA,QAC3C,OACI,eAAC+O,GAAA,EAAD,CAAM5E,GAAImB,IAAMjB,GAAE,oBAAerK,EAAQC,UAAzC,UACI,cAAC+K,EAAA,EAAD,CAAOR,IAAKxK,EAAQmB,OAAS,qBAC7B,eAAC4N,GAAA,EAAKP,QAAN,WACI,cAACO,GAAA,EAAKjC,OAAN,UAAc9M,EAAQkB,cACtB,cAAC6N,GAAA,EAAKC,YAAN,+BAEJ,eAACD,GAAA,EAAKP,QAAN,CAAcS,OAAK,EAAnB,UACI,cAACC,GAAA,EAAD,CAAMtE,KAAK,SACV5K,EAAQuE,eAFb,gBAIA,cAAC,GAAD,CAAcvE,QAASA,UCXpB6J,gBAAS,YAAyD,IAArB7G,EAAoB,EAApBA,UAClDmM,EAAS,CACXC,YAAa,SACbC,YAAa,GAGjB,OACI,cAAC9B,GAAA,EAAD,CAAM+B,YAAU,EAAhB,SACKtM,EAAUwK,KAAI,SAAA9J,GAAQ,OACnB,cAAC6L,GAAA,EAAD,CACIC,WAAS,EAETC,QACI,cAAClC,GAAA,EAAKrD,KAAN,CAAmCC,GAAImB,IAAMjB,GAAE,oBAAe3G,EAASzD,UAAvE,SACI,cAAC+K,EAAA,EAAD,CACImD,KAAK,OACLuB,UAAQ,EAAClF,IAAK9G,EAASvC,OAAS,mBAChCwO,UAAQ,EACRjF,MAAOhH,EAASW,UAAY8K,EAAS,QAL7BzL,EAASzD,UAJjC,SAYI,cAACsP,GAAA,EAAMf,QAAP,UACI,cAAC,GAAD,CAAaxO,QAAS0D,OAXrBA,EAASzD,kBCXnB,SAAS2P,GAAT,GAAgD,IAAD,IAAnB7Q,EAAmB,EAAnBA,SAEvC,OACI,eAACkP,EAAA,EAAQ4B,MAAT,WACI,eAAC5B,EAAA,EAAD,WACKlP,EAASmF,aACN,cAACgI,EAAA,EAAD,CAAO4D,SAAS,MAAM1D,MAAM,MAAMrE,QAAQ,YAAY2C,MAAO,CAAEqC,UAAW,YAE9E,cAAC7C,GAAA,EAAK2F,MAAN,UACI,eAAC3F,GAAA,EAAD,WACI,cAACA,GAAA,EAAKc,MAAN,CAAYN,MAAO,CAAE0D,aAAc,GAAKD,KAAK,OAAOuB,UAAQ,EAAClF,KAAK,UAAAzL,EAASsE,YAAT,eAAelC,QAAS,qBAC1F,eAAC+I,GAAA,EAAKsE,QAAN,WACI,cAACtE,GAAA,EAAK4C,OAAN,CAAa3C,GAAImB,IAAMjB,GAAE,sBAAiBtL,EAASF,IAAnD,SACKE,EAAS4B,QAEd,eAACuJ,GAAA,EAAK8E,YAAN,wBAA4B,cAAC,IAAD,CAAM3E,GAAE,oBAAetL,EAASqE,cAAhC,mBAAiDrE,EAASsE,YAA1D,aAAiD,EAAenC,iBAC3FnC,EAASoE,QACN,cAAC+G,GAAA,EAAK8E,YAAN,UACI,cAAC9C,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,SAAnB,6CAKPrN,EAASgE,UAAYhE,EAASoE,QAC3B,cAAC+G,GAAA,EAAK8E,YAAN,UACI,cAAC9C,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,QAAnB,yDASxB,cAAC6B,EAAA,EAAD,UACI,iCACI,cAACiB,GAAA,EAAD,CAAMtE,KAAK,UADf,IAC2BnF,kBAAO1G,EAAS6B,KAAO,uBAC9C,cAACsO,GAAA,EAAD,CAAMtE,KAAK,WAFf,IAE4B7L,EAASiC,WAGzC,cAACiN,EAAA,EAAD,CAAS8B,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0B/M,UAAWjE,EAASiE,cAElD,eAACiL,EAAA,EAAD,CAAS+B,UAAQ,EAAjB,UACI,+BAAOjR,EAAS8B,cAChB,cAACgK,EAAA,EAAD,CACIV,GAAImB,IACJjB,GAAE,sBAAiBtL,EAASF,IAC5BuN,MAAM,OACN6D,QAAQ,QACRlI,QAAQ,eCvDb8B,oBAAS,WACpB,IACQqG,EADkBvG,IAAlBtC,cACA6I,kBAER,OACI,mCACKA,EAAkB1C,KAAI,mCAAE2C,EAAF,KAAS3K,EAAT,YACnB,eAAC,WAAD,WACI,cAACsH,EAAA,EAAD,CAAQsD,KAAG,EAAChE,MAAM,OAAlB,SACK+D,IAEJ3K,EAAWgI,KAAI,SAAAzO,GAAQ,OACpB,cAAC6Q,GAAD,CAAoC7Q,SAAUA,GAAvBA,EAASF,SALzBsR,W,UCPhBtG,gBAAS,WACpB,MAAuDF,IAA/CtC,cAAiBjH,EAAzB,EAAyBA,UAAW2B,EAApC,EAAoCA,aAEpC,OACI,qCACI,eAAC+H,EAAA,EAAD,CAAMoE,UAAQ,EAACC,KAAK,QAAQzD,MAAO,CAAEgE,MAAO,OAAQ2B,UAAW,IAA/D,UACI,cAACvD,EAAA,EAAD,CAAQvB,KAAK,SAASuE,UAAQ,EAAC1D,MAAM,OAAOrE,QAAQ,YACpD,cAAC+B,EAAA,EAAKI,KAAN,CACInC,QAAQ,iBACRuI,OAAQlQ,EAAUmQ,IAAI,OACtB/E,QAAS,kBAAMzJ,EAAa,MAAO,WAEvC,cAAC+H,EAAA,EAAKI,KAAN,CACInC,QAAQ,YACRuI,OAAQlQ,EAAUmQ,IAAI,WACtB/E,QAAS,kBAAMzJ,EAAa,UAAW,WAE3C,cAAC+H,EAAA,EAAKI,KAAN,CACInC,QAAQ,cACRuI,OAAQlQ,EAAUmQ,IAAI,UACtB/E,QAAS,kBAAMzJ,EAAa,SAAU,cAG9C,cAAC+K,EAAA,EAAD,IACA,cAAC,KAAD,CACI0D,SAAU,SAAC5P,GAAD,OAAUmB,EAAa,YAAanB,IAC9CoB,MAAO5B,EAAUlC,IAAI,cAAgB,IAAIqF,a,+BC7B1C,SAASkN,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAatD,OAAK,EAAC1C,MAAO,CAAE2F,UAAW,IAAvC,SACI,eAACpC,EAAA,EAAQ4B,MAAT,WACI,cAAC5B,EAAA,EAAD,CAASvD,MAAO,CAAEiG,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAY5D,OAAb,CAAoB3L,OAAK,EAAzB,UACI,cAACuP,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAAC3C,EAAA,EAAD,UACI,eAACyC,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAAC3C,EAAA,EAAD,CAAS8B,WAAS,EAACrF,MAAO,CAAEiG,UAAW,MACvC,cAAC1C,EAAA,EAAD,CAAS+B,UAAQ,EAAjB,SACI,cAACnF,EAAA,EAAD,CAAQmD,UAAQ,EAAC5B,MAAM,OAAO6D,QAAQ,QAAQlI,QAAQ,kBCf/D8B,oBAAS,WACpB,IAAQxC,EAAkBsC,IAAlBtC,cACAlF,EAAkEkF,EAAlElF,eAAgBd,EAAkDgG,EAAlDhG,iBAAkBS,EAAgCuF,EAAhCvF,gBAAiBnG,EAAe0L,EAAf1L,WAC3D,EAAsCmV,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAcA,OANAC,qBAAU,WACF5P,EAAiB8M,MAAQ,GAAGhM,MACjC,CAACd,EAAiB8M,KAAMhM,IAKvB,eAAC+O,GAAA,EAAD,WACI,cAACA,GAAA,EAAKC,OAAN,CAAazC,MAAM,KAAnB,SACKrH,EAAc1F,iBAAmBoP,EAC9B,qCACI,cAAC,GAAD,IACA,cAAC,GAAD,OAGJ,cAAC,KAAD,CACIK,UAAW,EACXC,SAvBpB,WACIL,GAAe,GACflP,EAAgB,IAAIjG,EAAaF,EAAY2V,YAAc,IAC3DnP,IAAiBhE,MAAK,kBAAM6S,GAAe,OAqB3BO,SAAUR,KAAiBpV,GAAcA,EAAW2V,YAAc3V,EAAW6V,WAHjF,SAKI,cAAC,GAAD,QAIZ,cAACN,GAAA,EAAKC,OAAN,CAAazC,MAAM,IAAnB,SACI,cAAC,GAAD,MAEJ,cAACwC,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACI,cAAC+C,GAAA,EAAD,CAAQnB,OAAQS,Y,UC3CjB,SAASW,GAAT,GAA+E,IAAD,IAAlD3H,gBAAkD,aAAjChC,eAAiC,MAAvB,aAAuB,EACzF,OACI,cAAC4J,GAAA,EAAD,CAAQrB,QAAQ,EAAMvG,SAAUA,EAAhC,SACI,cAAC0H,GAAA,EAAD,CAAQ1J,QAASA,M,cCAd,SAAS6J,GAAWlG,GAC/B,MAAsBC,YAASD,EAAMd,MAArC,mBAAOgB,EAAP,KAAcC,EAAd,KAEA,OACI,eAACC,EAAA,EAAKC,MAAN,CAAY9O,MAAO4O,EAAKG,WAAaH,EAAK5O,MAA1C,UACI,gCAAQyO,EAAMO,QACd,oDACQL,GACAF,IAEPG,EAAKG,SAAWH,EAAK5O,MAClB,cAACiP,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAK5O,QAC/B,Q,cCZD,SAAS4U,GAAcnG,GAClC,MAA+BC,YAASD,EAAMd,MAA9C,mBAAOgB,EAAP,KAAcC,EAAd,KAAoBiG,EAApB,KAEA,OACI,eAAChG,EAAA,EAAKC,MAAN,CAAY9O,MAAO4O,EAAKG,WAAaH,EAAK5O,MAA1C,UACI,gCAAQyO,EAAMO,QACd,cAAC8F,GAAA,EAAD,CACIC,WAAS,EACTC,QAASvG,EAAMuG,QACfjQ,MAAO4J,EAAM5J,OAAS,KACtBwO,SAAU,SAAC5B,EAAGsD,GAAJ,OAAUJ,EAAQK,SAASD,EAAElQ,QACvCoQ,OAAQ,kBAAMN,EAAQO,YAAW,IACjCrF,YAAatB,EAAMsB,cACtBnB,EAAKG,SAAWH,EAAK5O,MAClB,cAACiP,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAK5O,QAC/B,Q,yBCrBD,SAASqV,GAAY5G,GAChC,MAA+BC,YAASD,EAAMd,MAA9C,mBAAOgB,EAAP,KAAcC,EAAd,KAAoBiG,EAApB,KAEA,OACI,eAAChG,EAAA,EAAKC,MAAN,CAAY9O,MAAO4O,EAAKG,WAAaH,EAAK5O,MAA1C,UACI,cAAC,KAAD,uCACQ2O,GACAF,GAFR,IAGI6G,SAAW3G,EAAM5J,OAAS,IAAIuB,KAAKqI,EAAM5J,QAAW,KACpDwO,SAAU,SAAAxO,GAAK,OAAI8P,EAAQK,SAASnQ,OAEvC6J,EAAKG,SAAWH,EAAK5O,MAClB,cAACiP,EAAA,EAAD,CAAOC,OAAK,EAACC,MAAM,MAAnB,SAA0BP,EAAK5O,QAC/B,QClBT,IAAMuV,GAAkB,CAC3B,CAAEnH,KAAM,SAAUrJ,MAAO,UACzB,CAAEqJ,KAAM,UAAWrJ,MAAO,WAC1B,CAAEqJ,KAAM,OAAQrJ,MAAO,QACvB,CAAEqJ,KAAM,OAAQrJ,MAAO,QACvB,CAAEqJ,KAAM,QAASrJ,MAAO,SACxB,CAAEqJ,KAAM,SAAUrJ,MAAO,WCWd6H,gBAAS,WACpB,IAAItM,EAAUkV,cACNpL,EAAkBsC,IAAlBtC,cACA1F,EAAiE0F,EAAjE1F,eAAgB8B,EAAiD4D,EAAjD5D,eAAgBG,EAAiCyD,EAAjCzD,eAAgBjB,EAAiB0E,EAAjB1E,aAChD9D,EAAO6T,cAAP7T,GAER,EAAgCiS,mBAA6B,IAAIpQ,GAAjE,mBAAO3B,EAAP,KAAiB4T,EAAjB,KAEMhF,EAAmBC,KAAW,CAChCjN,MAAOiN,OAAaC,SAAS,kCAC7BhN,YAAa+M,OAAaC,SAAS,wCACnC/M,SAAU8M,OAAaC,WACvBjN,KAAMgN,OAAaC,SAAS,oBAAoB+E,WAChD7R,KAAM6M,OAAaC,WACnB7M,MAAO4M,OAAaC,aAmBxB,OAhBAoD,qBAAU,WACFpS,GAAI8D,EAAa9D,GAAIV,MAAK,SAAAY,GAAQ,OAAI4T,EAAY,IAAIjS,EAAmB3B,SAC9E,CAACF,EAAI8D,IAcJhB,EAAuB,cAAC+P,GAAD,CAAkB3J,QAAQ,wBAGjD,eAACkG,EAAA,EAAD,CAAS+B,UAAQ,EAAjB,UACI,cAAClD,EAAA,EAAD,CAAQ/E,QAAQ,mBAAmBqI,KAAG,EAAChE,MAAM,SAC7C,cAAC,IAAD,CACIuB,iBAAkBA,EAClBkF,oBAAkB,EAClBxG,cAAetN,EACfyN,SAAU,SAAAvH,GAAM,OArB5B,SAA0BlG,GACtB,GAAKA,EAASF,GAOV+E,EAAe7E,GAAUZ,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BuB,EAASF,YAP3D,CACd,IAAI8E,EAAW,2BACR5E,GADQ,IAEXF,GAAIiU,iBAERrP,EAAeE,GAAaxF,MAAK,kBAAMZ,EAAQC,KAAR,sBAA4BmG,EAAY9E,SAevDkU,CAAiB9N,IAJzC,SAKK,gBAAGyH,EAAH,EAAGA,aAAcoB,EAAjB,EAAiBA,QAASnB,EAA1B,EAA0BA,aAAcoB,EAAxC,EAAwCA,MAAxC,OACG,eAAC,IAAD,CAAMnB,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACpB,EAAD,CAAab,KAAK,QAAQoC,YAAY,UACtC,cAAC4E,GAAD,CAAY5E,YAAY,cAAcpC,KAAK,cAAcoI,KAAM,IAC/D,cAACnB,GAAD,CAAeI,QAASO,GAAiBxF,YAAY,WAAWpC,KAAK,aACrE,cAAC0H,GAAD,CACIW,gBAAgB,OAChBrI,KAAK,OACLsI,gBAAc,EACdC,YAAY,OACZC,WAAW,0BAEf,cAACtG,EAAA,EAAD,CAAQ/E,QAAQ,mBAAmBqI,KAAG,EAAChE,MAAM,SAC7C,cAACX,EAAD,CAAauB,YAAY,OAAOpC,KAAK,SACrC,cAACa,EAAD,CAAauB,YAAY,QAAQpC,KAAK,UACtC,cAACC,EAAA,EAAD,CACImD,SAAUrB,IAAiBmB,IAAYC,EACvCrM,QAASiL,EAAcsD,QAAQ,QAC/BnF,UAAQ,EAACmC,KAAK,SAASlF,QAAQ,WAEnC,cAAC8C,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAc4F,QAAQ,QAAQhD,KAAK,SAASlF,QAAQ,uB,oBClElF8B,gBAAS,YAAsD,IAAtBxB,EAAqB,EAArBA,WAC5CJ,EAAiB0B,IAAjB1B,aAERgJ,qBAAU,WAKN,OAJI5I,GACAJ,EAAaG,oBAAoBC,GAG7B,WACJJ,EAAaqB,mBAElB,CAACrB,EAAcI,IAElB,IAAMsF,EAAmBC,KAAW,CAChCxP,KAAMwP,OAAaC,aAGvB,OACI,qCACI,cAACI,EAAA,EAAD,CACIlB,UAAU,SACV+C,SAAS,MACT/F,UAAQ,EACRqC,MAAM,OACN1B,MAAO,CAAE2I,OAAQ,QALrB,SAOI,cAACvG,EAAA,EAAD,sCAEJ,eAACmB,EAAA,EAAD,CAAS6B,UAAQ,EAACE,UAAQ,EAA1B,UACI,cAAC,IAAD,CACIrC,iBAAkBA,EAClBtB,cAAe,CAAEjO,KAAM,IACvBoO,SAAU,SAACvH,EAAD,OAAWqO,EAAX,EAAWA,UAAX,OAA2BrL,EAAasB,WAAWtE,GAAQ9G,MAAK,kBAAMmV,QAHpF,SAIK,gBAAG3G,EAAH,EAAGA,aAAcmB,EAAjB,EAAiBA,QAASpB,EAA1B,EAA0BA,aAA1B,OACG,cAAC,IAAD,CAAME,UAAU,UAAhB,SACI,cAAC,IAAD,CAAOhC,KAAK,OAAZ,SACK,SAACc,GAAD,OACG,sBAAKhB,MAAO,CAAEK,SAAU,YAAxB,UACI,cAAC0G,GAAA,EAAD,CAAQnB,OAAQ3D,IAChB,kDACIK,YAAY,mEACZgG,KAAM,GACFtH,EAAME,OAHd,IAII2H,WAAY,SAAA3E,GACM,UAAVA,EAAElR,KAAmBkR,EAAE4E,UAGb,UAAV5E,EAAElR,KAAoBkR,EAAE4E,WACxB5E,EAAEC,iBACFf,GAAWpB,oBAU/C,cAAC+G,GAAA,EAAQ5D,MAAT,UACK5H,EAAaC,SAASsF,KAAI,SAAAvE,GAAO,OAC9B,eAACwK,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBlJ,IAAKvB,EAAQ9H,OAAS,qBACtC,eAACsS,GAAA,EAAQjF,QAAT,WACI,cAACiF,GAAA,EAAQE,OAAT,CAAgBxJ,GAAImB,IAAMjB,GAAE,oBAAepB,EAAQhJ,UAAnD,SACKgJ,EAAQ/H,cAEb,cAACuS,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoB5K,EAAQC,WAAlC,YAEJ,cAACuK,GAAA,EAAQK,KAAT,CAAcpJ,MAAO,CAAEqJ,WAAY,YAAnC,SAAkD9K,EAAQ7K,YATpD6K,EAAQpK,kBCnExCmV,GAAqB,CACvBhQ,OAAQ,mBAGNiQ,GAAyB,CAC3BlJ,SAAU,WACVmJ,OAAQ,KACRC,KAAM,KACNzF,MAAO,OACP0F,OAAQ,OACRhI,MAAO,SAOIvC,gBAAS,YAAsD,IAAD,IAAnB9K,EAAmB,EAAnBA,SACtD,EAA6E4K,IAArEtC,cAAiBtD,EAAzB,EAAyBA,eAAgBrC,EAAzC,EAAyCA,QAASuC,EAAlD,EAAkDA,qBAClD,OACI,eAACgK,EAAA,EAAQ4B,MAAT,WACI,eAAC5B,EAAA,EAAD,CAAS9B,OAAK,EAAC2D,SAAS,MAAMpF,MAAO,CAAE2J,QAAS,KAAhD,UACKtV,EAASmF,aACN,cAACgI,EAAA,EAAD,CAAOxB,MAAO,CAAEK,SAAU,WAAYuJ,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAChEC,QAAM,EAACpI,MAAM,MAAMrE,QAAQ,cAEnC,cAACiD,EAAA,EAAD,CAAOR,IAAG,iCAA4BzL,EAAS+B,SAArC,QAAqDsM,OAAK,EAAC1C,MAAOsJ,KAC5E,cAAC/F,EAAA,EAAD,CAASvD,MAAOuJ,GAAwB9H,OAAK,EAA7C,SACI,cAACjC,GAAA,EAAK2F,MAAN,UACI,cAAC3F,GAAA,EAAD,UACI,eAACA,GAAA,EAAKsE,QAAN,WACI,cAAC1B,EAAA,EAAD,CACIqB,KAAK,OACLpG,QAAShJ,EAAS4B,MAClB+J,MAAO,CAAE0B,MAAO,WAEpB,4BAAI3G,kBAAO1G,EAAS6B,KAAO,iBAC3B,2CACc,iCAAQ,cAAC,IAAD,CAAMyJ,GAAE,8BAAetL,EAASsE,YAAxB,aAAe,EAAepD,UAAtC,mBAAmDlB,EAASsE,YAA5D,aAAmD,EAAenC,+BAO5G,cAAC+M,EAAA,EAAD,CAAS+B,UAAQ,EAACF,SAAS,SAA3B,SACK/Q,EAASoE,OACN,qCACI,cAAC0H,EAAA,EAAD,CAAQuB,MAAOrN,EAASmF,YAAc,QAAU,MAAO+L,QAAQ,OAAO9D,OAAK,EACvEpE,QAAShJ,EAASmF,YAAc,uBAAyB,kBACzDsH,QAASvH,EACTvC,QAASA,IAEb,cAACmJ,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAE,kBAAatL,EAASF,IACtCmP,SAAUjP,EAASmF,YACnBkI,MAAM,SAAS6D,QAAQ,QAF3B,6BAMJlR,EAASgE,QACT,cAAC8H,EAAA,EAAD,CAAQnJ,QAASA,EAAS8J,QAASzH,EAAnC,+BAEA,cAAC8G,EAAA,EAAD,CAAQmD,SAAUjP,EAASmF,YACvBxC,QAASA,EACT8J,QAASzH,EAAgBqI,MAAM,OAFnC,mCC5DLvC,gBAAS,YAAoD,IAApB9K,EAAmB,EAAnBA,SACpD,OACI,eAACkP,EAAA,EAAQ4B,MAAT,WACI,cAAC5B,EAAA,EAAD,CAAS6B,SAAS,MAAlB,SACI,eAACoB,GAAA,EAAD,WACI,cAACA,GAAA,EAAKC,OAAN,CAAazC,MAAO,EAApB,SACI,cAACQ,GAAA,EAAD,CAAMf,KAAK,QAAQ/B,MAAM,OAAOxB,KAAK,WAEzC,cAACsG,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACI,4BAAI3P,EAAS8B,qBAIzB,cAACoN,EAAA,EAAD,CAAS6B,UAAQ,EAAjB,SACI,eAACoB,GAAA,EAAD,CAAMuD,cAAc,SAApB,UACI,cAACvD,GAAA,EAAKC,OAAN,CAAazC,MAAO,EAApB,SACI,cAACQ,GAAA,EAAD,CAAMtE,KAAK,WAAWuD,KAAK,QAAQ/B,MAAM,WAE7C,cAAC8E,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACI,+BACKjJ,kBAAO1G,EAAS6B,KAAO,gCAKxC,cAACqN,EAAA,EAAD,CAAS6B,UAAQ,EAAjB,SACI,eAACoB,GAAA,EAAD,CAAMuD,cAAc,SAApB,UACI,cAACvD,GAAA,EAAKC,OAAN,CAAazC,MAAO,EAApB,SACI,cAACQ,GAAA,EAAD,CAAMtE,KAAK,SAASuD,KAAK,QAAQ/B,MAAM,WAE3C,cAAC8E,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACI,iCAAO3P,EAASiC,MAAhB,KAAyBjC,EAASgC,qBC/B3C8I,gBAAS,YAA4E,IAAD,IAAxC9K,SAAYiE,EAA4B,EAA5BA,UAAWK,EAAiB,EAAjBA,KAC9E,OAAKL,EAED,qCACI,eAACiL,EAAA,EAAD,CACIlB,UAAU,SACVrC,MAAO,CAAE2I,OAAQ,QACjBvD,SAAS,MACTC,WAAS,EACThG,UAAQ,EACRqC,MAAM,OANV,UAQKpJ,EAAU0R,OARf,IAQ6C,IAArB1R,EAAU0R,OAAe,SAAW,SAR5D,YAUA,cAACzG,EAAA,EAAD,CAAS6B,UAAQ,EAAjB,SACI,cAACvC,GAAA,EAAD,CAAMoH,SAAO,EAACC,SAAO,EAArB,SACK5R,EAAUwK,KAAI,SAAA9J,GAAQ,OACnB,eAACwG,GAAA,EAAD,CAAMQ,MAAO,CAAEK,SAAU,YAAzB,UACKrH,EAASzD,YAAT,OAAsBoD,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAMpD,WACzB,cAACiM,EAAA,EAAD,CACIxB,MAAO,CAAEK,SAAU,YACnBqB,MAAM,SACNoI,OAAO,QAHX,kBAQJ,cAACxJ,EAAA,EAAD,CAAOmD,KAAK,OAAO3D,IAAK9G,EAASvC,OAAS,qBAC1C,eAAC+I,GAAA,EAAKsE,QAAN,CAAciG,cAAc,SAA5B,UACI,cAACvK,GAAA,EAAK4C,OAAN,CAAa3C,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,oBAAe3G,EAASzD,UAAhC,SAA6CyD,EAASxC,gBAEzDwC,EAASW,WACN,cAAC6F,GAAA,EAAK2K,MAAN,CAAYnK,MAAO,CAAE0B,MAAO,UAA5B,4BAhBgC1I,EAASzD,oBAhBlD,QCAZ4J,gBAAS,WACpB,IAAQxC,EAAkBsC,IAAlBtC,cACkBtI,EAAkEsI,EAApF9F,iBAA4BI,EAAwD0F,EAAxD1F,eAAgBgB,EAAwC0E,EAAxC1E,aAAcwB,EAA0BkD,EAA1BlD,sBAC1DtF,EAAO6T,cAAP7T,GAOR,OALAoS,qBAAU,WAEN,OADIpS,GAAI8D,EAAa9D,GACd,kBAAMsF,OACd,CAACtF,EAAI8D,EAAcwB,IAElBxC,IAAmB5C,EAAiB,cAAC2S,GAAD,IAGpC,eAACR,GAAA,EAAD,WACI,eAACA,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,UACI,cAAC,GAAD,CAAwB3P,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsBsJ,WAAYtJ,EAASF,QAE/C,cAACqS,GAAA,EAAKC,OAAN,CAAazC,MAAO,EAApB,SACI,cAAC,GAAD,CAAyB3P,SAAUA,Y,8BCrBpC8K,gBAAS,YAA4C,IAAnB7J,EAAkB,EAAlBA,QAC7C,OACI,cAACiO,EAAA,EAAD,UACI,eAACiD,GAAA,EAAD,WACI,cAACA,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACI,cAACxE,GAAA,EAAK2F,MAAN,UACI,eAAC3F,GAAA,EAAD,WACI,cAACA,GAAA,EAAKc,MAAN,CAAYC,QAAM,EAACkD,KAAK,QAAQ3D,IAAKxK,EAAQmB,OAAS,qBACtD,cAAC+I,GAAA,EAAKsE,QAAN,CAAciG,cAAc,SAA5B,SACI,cAAC3H,EAAA,EAAD,CAAQ3C,GAAG,KAAKpC,QAAS/H,EAAQkB,uBAKjD,eAACgQ,GAAA,EAAKC,OAAN,CAAazC,MAAO,EAApB,UACI,eAACoG,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAW9I,MAAM,YAAYjK,MAAOhC,EAAQuE,iBAC5C,cAACwQ,GAAA,EAAD,CAAW9I,MAAM,YAAYjK,MAAOhC,EAAQsE,qBAEhD,cAAC0Q,GAAA,EAAD,IACA,cAAC,GAAD,CAAchV,QAASA,e,oBCtB5B,SAASiV,GAAT,GAAmD,IAApBC,EAAmB,EAAnBA,SACpCC,EAAW,CACb9B,OAAQ,kBACRjE,YAAa,OACbgG,aAAc,MACdC,WAAY,OACZtI,UAAW,SACXqH,OAAQ,KAONkB,EAASC,uBAAY,SAAAC,GACvBN,EAASM,EAAchI,KAAI,SAAC9N,GAAD,OAAec,OAAOC,OAAOf,EAAM,CAC1D+V,QAASC,IAAIC,gBAAgBjW,WAElC,CAACwV,IAEJ,EAAsDU,aAAY,CAAEN,WAA5DO,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,aAErC,OACI,gDAASF,KAAT,IAAyBnL,MAAOqL,EAAY,2BAAQZ,GAbvC,CACb/F,YAAa,UAYiE+F,EAA9E,UACI,qCAAWW,MACX,cAAC5G,GAAA,EAAD,CAAMtE,KAAK,SAASuD,KAAK,SACzB,cAACrB,EAAA,EAAD,CAAQ/E,QAAQ,wB,qBCzBb,SAASiO,GAAT,GAAkE,IAApCC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,WACvD,OACI,cAAC,KAAD,CACI1L,IAAKyL,EACLvL,MAAO,CAAE0J,OAAQ,IAAK1F,MAAO,QAC7ByH,mBAAoB,EACpBC,YAAa,EACbX,QAAQ,eACRY,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIR,EAAWQ,MCTlC,SAASC,GAAT,GAA6D,IAAhClX,EAA+B,EAA/BA,YAAaiC,EAAkB,EAAlBA,QACrD,EAA0BoP,mBAAc,IAAxC,mBAAO8F,EAAP,KAAc1B,EAAd,KACA,EAA8BpE,qBAA9B,mBAAO4F,EAAP,KAAgBR,EAAhB,KAcA,OANAjF,qBAAU,WACN,OAAO,WACH2F,EAAM1U,SAAQ,SAACxC,GAAD,OAAegW,IAAImB,gBAAgBnX,EAAK+V,eAE3D,CAACmB,IAGA,eAAC1F,GAAA,EAAD,WACI,eAACA,GAAA,EAAKC,OAAN,CAAazC,MAAO,EAApB,UACI,cAAC5B,EAAA,EAAD,CAAQsD,KAAG,EAAChE,MAAM,OAAOrE,QAAQ,uBACjC,cAACkN,GAAD,CAAqBC,SAAUA,OAEnC,cAAChE,GAAA,EAAKC,OAAN,CAAazC,MAAO,IACpB,eAACwC,GAAA,EAAKC,OAAN,CAAazC,MAAO,EAApB,UACI,cAAC5B,EAAA,EAAD,CAAQsD,KAAG,EAAChE,MAAM,OAAOrE,QAAQ,0BAChC6O,GAASA,EAAMlC,OAAS,GACrB,cAACsB,GAAD,CAAoBE,WAAYA,EAAYD,aAAcW,EAAM,GAAGnB,aAG3E,cAACvE,GAAA,EAAKC,OAAN,CAAazC,MAAO,IACpB,eAACwC,GAAA,EAAKC,OAAN,CAAazC,MAAO,EAApB,UACI,cAAC5B,EAAA,EAAD,CAAQsD,KAAG,EAAChE,MAAM,OAAOrE,QAAQ,8BAChC6O,GAASA,EAAMlC,OAAS,GACrB,qCACI,qBAAK9H,UAAU,cAAclC,MAAO,CAAEiG,UAAW,IAAKmG,SAAU,YAChE,eAACjM,EAAA,EAAOgF,MAAR,CAAckH,OAAQ,EAAtB,UACI,cAAClM,EAAA,EAAD,CAAQnJ,QAASA,EAAS8J,QAhClD,WACQkL,GACAA,EAAQM,mBAAmBC,QAAO,SAAAC,GAAI,OAAIzX,EAAYyX,OA8BKpM,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQmD,SAAUtM,EAAS8J,QAAS,kBAAM0J,EAAS,KAAK3J,KAAK,sBCtC1E1B,oBAAS,YAA4C,IAAD,EAAlB7J,EAAkB,EAAlBA,QAC7C,EACwD2J,IADhD3B,aAAgBmP,EAAxB,EAAwBA,cAAe1X,EAAvC,EAAuCA,YACnC+G,EADJ,EACIA,UAAW9E,EADf,EACeA,QAAS5B,EADxB,EACwBA,aAAcC,EADtC,EACsCA,YACtC,EAAwC+Q,oBAAS,GAAjD,mBAAOsG,EAAP,KAAqBC,EAArB,KACA,EAA4BvG,mBAAS,IAArC,mBAAOwG,EAAP,KAAeC,EAAf,KAgBA,OACI,cAACC,GAAA,EAAIC,KAAL,UACI,eAACvG,GAAA,EAAD,WACI,eAACA,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,UACI,cAAC5B,EAAA,EAAD,CAAQmD,QAAQ,OAAO1E,KAAK,QAAQxD,QAAQ,WAC3CoP,GACG,cAACtM,EAAA,EAAD,CAAQoF,QAAQ,QAAQ9D,OAAK,EACzBpE,QAASqP,EAAe,SAAW,YACnC5L,QAAS,kBAAM6L,GAAiBD,SAG5C,cAAClG,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACK0I,EACG,cAACT,GAAD,CAAmBlX,YA3BvC,SAA2BC,GACvBD,EAAYC,GAAMvB,MAAK,WAAQkZ,GAAgB,OA0BoB3V,QAAS8E,IAE5D,cAACuI,GAAA,EAAKc,MAAN,CAAY6H,YAAa,EAAzB,mBACK1X,EAAQiH,cADb,aACK,EAAgBuG,KAAI,SAAAxG,GAAK,OACtB,eAAC+H,GAAA,EAAD,WACI,cAAC/D,EAAA,EAAD,CAAOR,IAAKxD,EAAM/I,MACjBkZ,GACG,eAACtM,EAAA,EAAOgF,MAAR,CAAczC,OAAK,EAAC2J,OAAQ,EAA5B,UACI,cAAClM,EAAA,EAAD,CACID,KAAM,OAAS5D,EAAMnI,GACrBmP,SAAUhH,EAAME,OAChBiF,OAAK,EACLC,MAAM,QACNrE,QAAQ,OACRrG,QAAS4V,IAAW,OAAStQ,EAAMnI,IAAM6C,EACzC8J,QAAS,SAAAoD,GAAC,OAtCtD,SAA4B5H,EAAc4H,GACtC2I,EAAU3I,EAAE+I,cAAc/M,MAC1B9K,EAAakH,GAoCyC4Q,CAAmB5Q,EAAO4H,MAC5C,cAAC/D,EAAA,EAAD,CACID,KAAM5D,EAAMnI,GACZmP,SAAUhH,EAAME,OAChBiF,OAAK,EACLC,MAAM,MACNb,KAAK,QACL7J,QAAS4V,IAAWtQ,EAAMnI,IAAM6C,EAChC8J,QAAS,SAAAoD,GAAC,OAzCtD,SAA2B5H,EAAc4H,GACrC2I,EAAU3I,EAAE+I,cAAc/M,MAC1B7K,EAAYiH,GAuC0C6Q,CAAkB7Q,EAAO4H,WAnB5C5H,EAAMnI,mBClClCgL,gBAAS,YAA+C,IAApBpI,EAAmB,EAAnBA,SAC/C,EAA8DkI,IAAtD3B,aAAgBhI,EAAxB,EAAwBA,QAASoH,EAAjC,EAAiCA,cAAe1F,EAAhD,EAAgDA,QAMhD,IAAMiM,EAAmBC,KAAW,CAChC1M,YAAa0M,OAAaC,WAC1BiK,IAAKlK,OAAaC,aAGtB,OACI,cAAC,IAAD,CACIF,iBAAkBA,EAClBtB,cAAe,CAAEnL,YAAW,OAAElB,QAAF,IAAEA,OAAF,EAAEA,EAASkB,YAAa4W,IAAG,OAAE9X,QAAF,IAAEA,OAAF,EAAEA,EAAS8X,KAClEtL,SAAU,SAAAvH,GAAM,OAbxB,SAA0BjF,GACtBoH,EAAcpH,GAAS7B,MAAK,kBAAMsD,GAAS,MAYnBsR,CAAiB9N,IAHzC,SAIK,cAAGyH,aAAH,IAAiBoB,EAAjB,EAAiBA,QAASnB,EAA1B,EAA0BA,aAAcoB,EAAxC,EAAwCA,MAAxC,OACG,eAAC,IAAD,CAAMnB,UAAU,UAAhB,UACI,cAACnB,EAAD,CAAab,KAAK,cAAcoC,YAAY,gBAC5C,cAAC4E,GAAD,CAAYhH,KAAK,MAAMoC,YAAY,eAAegG,KAAM,IACxD,cAACnI,EAAA,EAAD,CACImD,SAAUrB,IAAiBmB,IAAYC,GAASrM,EAChDuO,QAAQ,QACRnF,UAAQ,EACRmC,KAAK,SACLlF,QAAQ,4BCnCjB,SAASgQ,KACpB,MAAgCjH,oBAAS,GAAzC,mBAAOrP,EAAP,KAAiBuW,EAAjB,KACwBb,EAAoBxN,IAApC3B,aAAgBmP,cAExB,OACI,cAACK,GAAA,EAAIC,KAAL,UACI,eAACvG,GAAA,EAAD,WACI,eAACA,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,UACI,cAAC5B,EAAA,EAAD,CAAQmD,QAAQ,OAAO1E,KAAK,OAAOxD,QAAQ,cAC1CoP,GACG,cAACtM,EAAA,EAAD,CACIoF,QAAQ,QACR9D,OAAK,EACLpE,QAAStG,EAAW,SAAW,eAC/B+J,QAAS,kBAAMwM,GAAavW,SAGxC,cAACyP,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACKyI,GAAiB1V,GACd,cAAC,GAAD,CAAiBA,SAAUuW,WClBpCnO,oBAAS,WACpB,IAAQ7B,EAAiB2B,IAAjB3B,aACAhI,EAAsDgI,EAAtDhI,QAASyG,EAA6CuB,EAA7CvB,WAAYC,EAAiCsB,EAAjCtB,kBAAmBC,EAAcqB,EAAdrB,UAEhD,OACI,cAAC6Q,GAAA,EAAIC,KAAL,CAAU/V,QAASgF,EAAnB,SACI,eAACwK,GAAA,EAAD,WACI,cAACA,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACI,cAAC5B,EAAA,EAAD,CAAQmD,QAAQ,OAAO1E,KAAK,OACxBxD,QAAuB,IAAdpB,EAAA,kCAAsC3G,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASkB,aAA/C,wBACKlB,QADL,IACKA,OADL,EACKA,EAASkB,YADd,qBAGjB,cAACgQ,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACI,cAACK,GAAA,EAAKc,MAAN,CAAY6H,YAAa,EAAzB,SACKjR,EAAW+G,KAAI,SAAAxN,GAAO,OACnB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQC,yBCbvC4J,gBAAS,WACpB,MAIyBF,IAJjB3B,aACJhI,EADJ,EACIA,QACA6G,EAFJ,EAEIA,kBACAU,EAHJ,EAGIA,mBACAX,EAJJ,EAIIA,eAEEqR,EAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAEza,IAAK,WAC1C,CAAEwa,SAAU,cAAeC,KAAM,CAAEza,IAAK,SACxC,CAAEwa,SAAU,UAAWC,KAAM,CAAEza,IAAK,aAYxC,OATAuT,qBAAU,WACN1J,EAAmBvH,EAASC,YAC7B,CAACsH,EAAoBvH,IAQpB,cAACwX,GAAA,EAAIC,KAAL,CAAU/V,QAASmF,EAAnB,SACI,eAACqK,GAAA,EAAD,WACI,cAACA,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACI,cAAC5B,EAAA,EAAD,CAAQmD,QAAQ,OAAO1E,KAAK,WAAWxD,QAAQ,iBAEnD,cAACmJ,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACI,cAAC8I,GAAA,EAAD,CACIS,MAAOA,EACPG,KAAM,CAAErI,WAAW,EAAM3E,UAAU,GACnCiN,YAAa,SAACzJ,EAAGlT,GAAJ,OAfjC,SAAyBkT,EAAmBlT,GACxC6L,EAAmBvH,EAASC,SACxBgY,EAAMvc,EAAK4c,aAAuBH,KAAKza,KAaD6a,CAAgB3J,EAAGlT,QAGrD,cAACwV,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACI,cAACK,GAAA,EAAKc,MAAN,CAAY6H,YAAa,EAAzB,gBACK9Q,QADL,IACKA,OADL,EACKA,EAAgB4G,KAAI,SAAAgL,GAAY,OAC7B,eAACzJ,GAAA,EAAD,CACI5E,GAAImB,IACJjB,GAAE,sBAAiBmO,EAAa3Z,IAFpC,UAKI,cAACmM,EAAA,EAAD,CACIR,IAAG,iCAA4BgO,EAAa1X,SAAzC,QACH4J,MAAO,CAAEiG,UAAW,IAAK8H,UAAW,WAExC,eAAC1J,GAAA,EAAKP,QAAN,WACI,cAACO,GAAA,EAAKjC,OAAN,CAAaC,UAAU,SAAvB,SAAiCyL,EAAa7X,QAC9C,eAACoO,GAAA,EAAK2J,KAAN,CAAW3L,UAAU,SAArB,UACI,8BAAMtH,kBAAO,IAAIlC,KAAKiV,EAAa5X,MAAO,YAC1C,8BAAM6E,kBAAO,IAAIlC,KAAKiV,EAAa5X,MAAO,oBAV7C4X,EAAa3Z,mBCnCnCgL,gBAAS,YAA6C,IAAnB7J,EAAkB,EAAlBA,QACtCgI,EAAiB2B,IAAjB3B,aAEFiQ,EAAQ,CACV,CAAEC,SAAU,QAAShL,OAAQ,kBAAM,cAAC6K,GAAD,MACnC,CAAEG,SAAU,SAAUhL,OAAQ,kBAAM,cAAC,GAAD,CAAelN,QAASA,MAC5D,CAAEkY,SAAU,SAAUhL,OAAQ,kBAAM,cAACyL,GAAD,MACpC,CAAET,SAAU,YAAahL,OAAQ,kBAAM,cAAC,GAAD,MACvC,CAAEgL,SAAU,YAAahL,OAAQ,kBAAM,cAAC,GAAD,OAG3C,OACI,cAACsK,GAAA,EAAD,CACIY,KAAM,CAAEhL,OAAO,EAAMc,UAAU,GAC/B0K,aAAa,QACbX,MAAOA,EACPI,YAAa,SAACzJ,EAAGlT,GAAJ,OAAasM,EAAalB,aAAapL,EAAK4c,mBCnBtDzO,gBAAS,WACpB,IAAQrK,EAAakT,cAAblT,SACAwI,EAAiB2B,IAAjB3B,aACAzB,EAAuDyB,EAAvDzB,eAAgBQ,EAAuCiB,EAAvCjB,YAAa/G,EAA0BgI,EAA1BhI,QAAS8G,EAAiBkB,EAAjBlB,aAS9C,OAPAmK,qBAAU,WAEN,OADAlK,EAAYvH,GACJ,WACJsH,EAAa,MAElB,CAACC,EAAavH,EAAUsH,IAEvBP,EAAuB,cAACmL,GAAD,CAAkB3J,QAAQ,uBAGjD,cAACmJ,GAAA,EAAD,UACI,cAACA,GAAA,EAAKC,OAAN,CAAazC,MAAO,GAApB,SACK1O,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,cC1BlC,SAAS6Y,KACpB,IACA,EAA4B/H,mBAAS,MAArC,mBAAOzT,EAAP,KAAeoP,EAAf,KA0BA,OACI,qCACI,cAACK,EAAA,EAAD,CAAQ3C,GAAG,KAAKpC,QAAQ,yBACxB,cAACkG,EAAA,EAAD,UACI,eAACpD,EAAA,EAAOgF,MAAR,CAAckH,OAAO,IAArB,UACI,cAAClM,EAAA,EAAD,CAAQW,QA7BxB,WACIxP,IAAMkC,IAAI4a,uBAA6B/P,OAAM,SAAA0E,GAAG,OAAIhL,QAAQC,IAAI+K,EAAI5Q,cA4BvBkL,QAAQ,YAAYoE,OAAK,EAAC4M,SAAO,IAClE,cAAClO,EAAA,EAAD,CAAQW,QA1BxB,WACIxP,IAAMkC,IAAI4a,yBAA+B/P,OAAM,SAAA0E,GAAG,OAAIhL,QAAQC,IAAI+K,EAAI5Q,cAyBvBkL,QAAQ,cAAcoE,OAAK,EAAC4M,SAAO,IACtE,cAAClO,EAAA,EAAD,CAAQW,QAXxB,WACIxP,IAAMqC,KAAKya,iBAAwB,IAAI/P,OAAM,SAAA0E,GAAG,OAAIhB,EAAUgB,OAUV1F,QAAQ,mBAAmBoE,OAAK,EAAC4M,SAAO,IAChF,cAAClO,EAAA,EAAD,CAAQW,QAxBxB,WACIxP,IAAMkC,IAAI4a,0BAAgC/P,OAAM,SAAA0E,GAAG,OAAIhL,QAAQC,IAAI+K,EAAI5Q,cAuBvBkL,QAAQ,eAAeoE,OAAK,EAAC4M,SAAO,IACxE,cAAClO,EAAA,EAAD,CAAQW,QArBxB,WACIxP,IAAMkC,IAAI4a,0BAAgC/P,OAAM,SAAA0E,GAAG,OAAIhL,QAAQC,IAAI+K,EAAI5Q,cAoBtBkL,QAAQ,eAAeoE,OAAK,EAAC4M,SAAO,IACzE,cAAClO,EAAA,EAAD,CAAQW,QAlBxB,WACIxP,IAAMkC,IAAI4a,2BAAiC/P,OAAM,SAAA0E,GAAG,OAAIhL,QAAQC,IAAI+K,OAiBxB1F,QAAQ,WAAWoE,OAAK,EAAC4M,SAAO,SAGvE1b,GACG,cAACgQ,GAAD,CAAkBhQ,OAAQA,OC3C3B,SAAS2b,KACpB,OACI,eAAC/K,EAAA,EAAD,CAASjB,aAAW,EAApB,UACI,eAACF,EAAA,EAAD,CAAQvB,MAAI,EAAZ,UACI,cAAC2D,GAAA,EAAD,CAAMtE,KAAK,WADf,6DAIA,cAACqD,EAAA,EAAQgL,OAAT,UACI,cAACpO,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAc0O,SAAO,EAA1C,4CCPDlP,oBAAS,WAAwB,IAAD,IACnCnN,EAAgBiN,IAAhBjN,YAER,OACI,eAACuN,EAAA,EAAD,WACI,cAAC6C,EAAA,EAAD,CAAQ3C,GAAG,KAAKpC,QAAQ,iBACxB,cAAC+E,EAAA,EAAD,CAAQsD,KAAG,EAACjG,GAAG,KAAKiC,MAAM,MAAMrE,QAAO,UAAErL,EAAYO,aAAd,aAAE,EAAmBic,WAC3D,UAAAxc,EAAYO,aAAZ,eAAmB2B,UAChB,eAACqP,EAAA,EAAD,WACI,cAACnB,EAAA,EAAD,CAAQ3C,GAAG,KAAKpC,QAAQ,cAAcqE,MAAM,SAC5C,sBAAM1B,MAAO,CAAE2F,UAAW,QAA1B,SACK3T,EAAYO,MAAM2B,mB,UCX5BiL,gBAAS,WACpB,IAAQhE,EAAe8D,IAAf9D,WAER,OACI,cAACsT,GAAA,EAAD,CACItR,KAAMhC,EAAW+B,MAAMC,KACvBuR,QAASvT,EAAWC,WACpBqI,KAAK,OAHT,SAII,cAACgL,GAAA,EAAM3K,QAAP,UACK3I,EAAW+B,MAAMxJ,Y,2BCNnB,SAASib,GAAT,GAAiE,IAA9BC,EAA6B,EAAxCC,UAAyBC,EAAe,mBACtDnL,EAAiB1E,IAA9B7G,UAAauL,WAErB,OACI,cAAC,IAAD,2BACQmL,GADR,IAEItM,OAAQ,SAACxB,GAAD,OAAW2C,EAAa,cAACiL,EAAD,eAAe5N,IAAY,cAAC,IAAD,CAAUrB,GAAG,UC+CrER,oBA1Cf,WACE,IAAM4P,EAAWC,cACjB,EAAmC/P,IAA3BjN,EAAR,EAAQA,YAAaoG,EAArB,EAAqBA,UAUrB,OARAmO,qBAAU,WACJvU,EAAYF,MACdsG,EAAUqD,UAAUwT,SAAQ,kBAAMjd,EAAYgL,kBAE9ChL,EAAYgL,iBAEb,CAAChL,EAAaoG,IAEZpG,EAAY+K,UAGf,qCACE,cAAC,IAAD,CAAgBsD,SAAS,eAAe6O,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,IAAD,CAAOC,KAAK,IAAIvP,OAAK,EAACiP,UAAWO,KACjC,cAAC,IAAD,CACED,KAAM,QACN3M,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAACjD,EAAA,EAAD,CAAWS,MAAO,CAAE2F,UAAW,OAA/B,SACE,eAAC,IAAD,WACE,cAACgJ,GAAD,CAAcQ,KAAK,cAAcvP,OAAK,EAACiP,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWS,KAChD,cAACX,GAAD,CAAiCQ,KAAM,CAAC,kBAAmB,eAAgBN,UAAWU,IAAnER,EAAS/b,KAC5B,cAAC2b,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWW,KACpD,cAACb,GAAD,CAAcQ,KAAK,UAAUN,UAAWV,KACxC,cAAC,IAAD,CAAOgB,KAAK,gBAAgBN,UAAWY,KACvC,cAAC,IAAD,CAAOZ,UAAWP,mBApBG,cAACtH,GAAD,CAAkB3J,QAAQ,sBCjBhDqS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBnc,MAAK,YAAkD,IAA/Coc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,uCCNC,SAASO,KACpB,IAAQC,EAAanB,cAAbmB,SAMR,OAJA5J,qBAAU,WACNjL,OAAO8U,SAAS,EAAG,KACpB,CAACD,IAEG,KCIJ,IAAMtd,GAAUwd,eAEvBC,IAAS9N,OACP,cAACzD,EAAawR,SAAd,CAAuBjZ,MAAOvF,EAA9B,SACE,eAAC,IAAD,CAAQc,QAASA,GAAjB,UACE,cAACqd,GAAD,IACA,cAAC,GAAD,SAGJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.d8163189.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T>{\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber = 1;\n    pageSize = 2;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { store } from '../stores/store';\nimport { User, UserFormValues } from '../models/user';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { PaginatedResult } from '../models/pagination';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`;\n\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>;\n    }\n\n    return response;\n}, (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n    switch (status) {\n        case 400:\n            if (typeof data === 'string') {\n                toast.error(data);\n            }\n            if (config.method === 'get' && data.errors?.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key]);\n                    }\n                }\n                throw modalStateErrors.flat();\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody)\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params }).then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.delete<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: { 'Content-type': 'multipart/form-data' }\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.delete(`/photos/${id}`),\n    update: (profile: Partial<Profile>) => requests.put<void>(`/profiles/${profile.userName}`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) =>\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate?: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from './profile';\n\nexport interface Activity {\n  id: string;\n  title: string;\n  date: Date | null;\n  description: string;\n  category: string;\n  city: string;\n  venue: string;\n  hostUserName: string;\n  isCancelled: boolean;\n  isGoing: boolean;\n  isHost: boolean;\n  host?: Profile;\n  attendees?: Profile[];\n}\n\nexport class Activity implements Activity {\n  constructor(init?: ActivityFormValues) {\n    Object.assign(this, init);\n  }\n}\n\nexport class ActivityFormValues {\n  id: string = '';\n  title: string = '';\n  date: Date | null = null;\n  description: string = '';\n  category: string = '';\n  city: string = '';\n  venue: string = '';\n\n  constructor(activity?: ActivityFormValues) {\n    if (activity) {\n      this.id = activity.id;\n      this.title = activity.title;\n      this.date = activity.date;\n      this.description = activity.description;\n      this.category = activity.category;\n      this.city = activity.city;\n      this.venue = activity.venue;\n    }\n  }\n}\n","import { User } from \"./user\";\n\nexport interface Profile {\n    userName: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    photos?: Photo[];\n    following: boolean;\n    followingsCount: number;\n    followersCount: number;\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.userName = user.userName;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string,\n    url: string,\n    isMain: boolean\n}\n\nexport interface UserActivity {\n    id: string,\n    title: string,\n    category: string,\n    date: string\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { format } from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore {\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = true;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        );\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete(predicate);\n                this.predicate.set(predicate, value);\n                break;\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n\n        params.append(\"pageNumber\", this.pagingParams.pageNumber.toString());\n        params.append(\"pageSize\", this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString());\n            } else {\n                params.append(key, value);\n            }\n        })\n\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) =>\n            a.date!.getTime() - b.date!.getTime())\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as { [key: string]: Activity[] })\n        )\n    }\n\n    loadActivities = async () => {\n        this.setLoadingInitial(true);\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            // We can using runInAction()\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            });\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n        } else {\n            this.loadingInitial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n        return activity;\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                x => x.userName === user.userName\n            );\n            activity.isHost = activity.hostUserName === user.userName;\n            activity.host = activity.attendees?.find(x => x.userName === activity.hostUserName);\n        }\n        activity.date = new Date(activity.date!);\n        this.activityRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activityRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUserName = user!.userName;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendee = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees =\n                        this.selectedActivity.attendees?.filter(a => a.userName !== user?.userName);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => { this.loading = false });\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => { this.loading = false });\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees?.forEach(attendee => {\n                if (attendee.userName === username) {\n                    attendee.following ? attendee.followingsCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n}","import { makeAutoObservable, runInAction } from 'mobx';\nimport { User, UserFormValues } from \"../models/user\";\nimport agent from \"../api/agent\";\nimport { store } from './store';\nimport { history } from '../..';\n\nexport default class UserStore {\n    user: User | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user)\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    }\n\n    setDisplayName = (displayName: string) => {\n        if (this.user) this.user.displayName = displayName;\n    }\n}","import agent from '../api/agent';\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { store } from './store';\nimport { string } from 'yup/lib/locale';\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    UserActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.userName === this.profile.userName;\n        }\n\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n\n        try {\n            const profile = await agent.Profiles.get(username);\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            });\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateProfile = async (profile: Partial<Profile>) => {\n        this.loading = true;\n\n        try {\n            await agent.Profiles.update(profile);\n            runInAction(() => {\n                if (profile.displayName &&\n                    profile.displayName !== store.userStore.user?.displayName) {\n                    store.userStore.setDisplayName(profile.displayName);\n                }\n                this.loading = false;\n            });\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.userName !== store.userStore.user?.userName &&\n                    this.profile.userName !== username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.userName === store.userStore.user?.userName) {\n                    following ? this.profile.followingsCount++ : this.profile.followingsCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.userName === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            });\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.userName, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate);\n            runInAction(() => {\n                this.UserActivities = activities;\n                this.loadingActivities = false\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingActivities = false);\n        }\n    }\n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommonStore from \"./commonStore\";\nimport UserStore from \"./userStore\";\nimport ModalStore from './modalStore';\nimport ProfileStore from './ProfileStore';\nimport CommentStore from './commentStore';\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from '../models/serverError';\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        );\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import React from 'react';\nimport { makeAutoObservable } from 'mobx';\n\ninterface Modal {\n    open: boolean,\n    body: JSX.Element | null\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import React from 'react'\nimport { HubConnection, HubConnectionBuilder, LogLevel } from '@microsoft/signalr';\nimport { ChatComment } from '../models/comment';\nimport { makeAutoObservable, runInAction } from 'mobx';\nimport { store } from './store';\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            });\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment)\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n\n        try {\n            this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react';\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar() {\n    const { userStore: { user, logout } } = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name=\"Actvities\" />\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\n                <Menu.Item>\n                    <Button positive content=\"Create Activity\"\n                        as={NavLink} to='/createActivity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.userName}`} text='My profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu >\n    );\n})","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { Button, Header, Label } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function LoginForm() {\n    const { userStore } = useStore();\n    return (\n        <Formik\n            initialValues={{ email: '', password: '', error: null }}\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\n                setErrors({ error: 'Invalid email or password' }))}\n        >\n            {({ handleSubmit, isSubmitting, errors }) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() =>\n                            <Label style={{ marginBotton: 10 }} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({ errors }: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Formik, Form, ErrorMessage } from 'formik';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { Button, Header } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const { userStore } = useStore();\n\n    const validationSchema = Yup.object({\n        displayName: Yup.string().required(),\n        userName: Yup.string().required(),\n        email: Yup.string().required().email(),\n        password: Yup.string().required()\n    });\n\n    return (\n        <Formik\n            initialValues={{ displayName: '', userName: '', email: '', password: '', error: null }}\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\n                setErrors({ error }))}\n            validationSchema={validationSchema}\n        >\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='userName' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage\n                        name='error' render={() =>\n                            <ValidationErrors errors={errors.error} />}\n                    />\n                    <Button\n                        disabled={isSubmitting || !isValid || !dirty}\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n})","import React from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Link } from 'react-router-dom';\nimport { Container, Header, Segment, Image, Button } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n            <Container text>\n                <Header as='h1' inverted>\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to activities!\n                        </Button>\n                    </>\n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Login!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register!\n                        </Button>\n                    </>\n                )}\n            </Container>\n        </Segment>\n    );\n})","import React, { SyntheticEvent } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Reveal, Button } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const { profileStore, userStore } = useStore();\n    const { updateFollowing, loading } = profileStore;\n\n    if (userStore.user?.userName === profile.userName) return null;\n\n    function handleFollow(e: SyntheticEvent) {\n        e.preventDefault();\n        updateFollowing(profile.userName, !profile.following);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    color='teal'\n                    content={profile.following ? 'Following' : 'Not following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    onClick={e => handleFollow(e)}\n                />\n            </Reveal.Content>\n        </Reveal>)\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\nexport default observer(function ProfileCard({ profile }: Props) {\n    return (\n        <Card as={Link} to={`/profiles/${profile.userName}`} >\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>Bio goes here</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Image, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.userName}\n                    trigger={\n                        <List.Item key={attendee.userName} as={Link} to={`/profiles/${attendee.userName}`}>\n                            <Image\n                                size='mini'\n                                circular src={attendee.image || '/assets/user.png'}\n                                bordered\n                                style={attendee.following ? styles : null} />\n                        </List.Item>}\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n            ))}\n        </List>\n    )\n})","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Segment, Label } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport { format } from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{ textAlign: 'center' }} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{ marginBottom: 4 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUserName}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\nexport default observer(function ActivityList() {\n    const { activityStore } = useStore();\n    const { groupedActivities } = activityStore;\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n                    </Header>\n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n    );\n})","import Calendar from 'react-calendar'\nimport { Header, Menu } from 'semantic-ui-react'\nimport React from 'react'\nimport { observer } from 'mobx-react-lite';\nimport { useStore } from '../../../app/stores/store';\n\nexport default observer(function ActivityFilters() {\n    const { activityStore: { predicate, setPredicate } } = useStore();\n\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item\n                    content='All activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item\n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}\n                />\n            </Menu>\n            <Header />\n            <Calendar\n                onChange={(date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    );\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};\n","import React, { useEffect } from 'react';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport ActivityList from './ActivityList';\nimport { useStore } from '../../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport ActivityFilters from '../details/ActivityFilters'\nimport { useState } from 'react';\nimport { PagingParams } from '../../../app/models/pagination';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport ActivityListItemPlaceHolder from './ActivityListItemPlaceholder';\n\nexport default observer(function ActivityDashboard() {\n    const { activityStore } = useStore();\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities]);\n\n    // if (activityStore.loadingInitial && !loadingNext) { return (<LoadingComponent content='Loading activities...' />) }\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInitial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceHolder />\n                        <ActivityListItemPlaceHolder />\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    );\n})\n\n{/* <Button\n    floated='right'\n    content='More...'\n    positive\n    onClick={handleGetNext}\n    loading={loadingNext}\n    disabled={pagination?.currentPage === pagination?.totalPages}\n/> */}","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({ inverted = true, content = 'Loading...' }: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    rows: number;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea\n                {...field}\n                {...props}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    options: any;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select\n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)} \n                placeholder={props.placeholder} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!);\n\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","export const CategoryOptions = [\n    { text: 'Drinks', value: 'drinks' },\n    { text: 'Culture', value: 'culture' },\n    { text: 'Film', value: 'film' },\n    { text: 'Food', value: 'food' },\n    { text: 'Music', value: 'music' },\n    { text: 'Travel', value: 'travel' }\n]","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { CategoryOptions } from '../../../app/common/options/categoryOptions';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\nexport default observer(function ActivityFrom() {\n    let history = useHistory();\n    const { activityStore } = useStore();\n    const { loadingInitial, createActivity, updateActivity, loadActivity } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, SetActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        city: Yup.string().required(),\n        venue: Yup.string().required()\n    });\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => SetActivity(new ActivityFormValues(activity!)));\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`));\n        }\n    }\n\n    if (loadingInitial) return <LoadingComponent content='Loading activity...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize\n                initialValues={activity}\n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea placeholder='Description' name='description' rows={3} />\n                        <MySelectInput options={CategoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput\n                            placeholderText='Date'\n                            name='date'\n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy hh:mm aa'\n                        />\n                        <Header content='Location Details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button\n                            disabled={isSubmitting || !isValid || !dirty}\n                            loading={isSubmitting} floated='right'\n                            positive type='submit' content='Submit'\n                        />\n                        <Button as={Link} to='/activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    );\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns/esm'\n\nexport interface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n\n        return (() => {\n            commentStore.clearComments();\n        })\n    }, [commentStore, activityId]);\n\n    const validationSchema = Yup.object({\n        body: Yup.string().required(),\n    })\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    validationSchema={validationSchema}\n                    initialValues={{ body: '' }}\n                    onSubmit={(values, { resetForm }) => commentStore.addComment(values).then(() => resetForm())}>\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }} >\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.userName}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n    const { activityStore: { updateAttendee, loading, cancelActivityToggle } } = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                {activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, Top: 20 }}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'white' }}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.userName}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button color={activity.isCancelled ? 'green' : 'red'} floated='left' basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link} to={`/manage/${activity.id}`}\n                            disabled={activity.isCancelled}\n                            color='orange' floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendee}>Cancel attendance</Button>\n                ) : (\n                    <Button disabled={activity.isCancelled}\n                        loading={loading}\n                        onClick={updateAttendee} color='teal'>\n                        Join Activity\n                    </Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { format } from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>\n                            {format(activity.date!, 'dd MMM yyyy h:mm aa')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.userName}>\n                            {attendee.userName === host?.userName &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>\n                            }\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.userName}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                    <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n                                }\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react'\nimport { useParams } from 'react-router';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\nexport default observer(function ActivityDetails() {\n    const { activityStore } = useStore();\n    const { selectedActivity: activity, loadingInitial, loadActivity, clearSelectedActivity } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInitial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity} />\n            </Grid.Column>\n        </Grid>\n    );\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Segment, Grid, Item, Header, StatisticGroup, Statistic, Divider } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({ profile }: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <StatisticGroup>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingsCount} />\n                    </StatisticGroup>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    );\n})","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRaduis: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })));\n    }, [setFiles])\n\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\n            <input {...getInputProps()} />\n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n}","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({ imagePreview, setCropper }: Props) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{ height: 200, width: '100%' }}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport { Cropper } from 'react-cropper';\nimport { useEffect } from 'react';\n\ninterface Props {\n    uploadPhoto: (file: Blob) => void;\n    loading: boolean;\n}\n\nexport default function PhotoUploadWidget({ uploadPhoto, loading }: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                    <>\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                        <Button.Group widths={2}>\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>\n                }\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n    const { profileStore: { isCurrentUser, uploadPhoto,\n        uploading, loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => { setAddPhotoMode(false) });\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)} />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                        <Card.Group itemsPerRow={5}>\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser && (\n                                        <Button.Group fluid widths={2}>\n                                            <Button\n                                                name={'main' + photo.id}\n                                                disabled={photo.isMain}\n                                                basic\n                                                color='green'\n                                                content='Main'\n                                                loading={target === 'main' + photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)} />\n                                            <Button\n                                                name={photo.id}\n                                                disabled={photo.isMain}\n                                                basic\n                                                color='red'\n                                                icon='trash'\n                                                loading={target === photo.id && loading}\n                                                onClick={e => handleDeletePhoto(photo, e)} />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport { Button } from 'semantic-ui-react';\nimport { Formik, Form } from 'formik';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport MyTextArea from '../../app/common/form/MyTextArea';\nimport { useStore } from '../../app/stores/store';\nimport { Profile } from '../../app/models/profile';\nimport * as Yup from 'yup';\nimport { observer } from 'mobx-react-lite';\n\ninterface Props {\n    editMode: (mode: boolean) => void;\n}\n\nexport default observer(function ProfileEditForm({ editMode }: Props) {\n    const { profileStore: { profile, updateProfile, loading } } = useStore();\n\n    function handleFormSubmit(profile: Partial<Profile>) {\n        updateProfile(profile).then(() => editMode(false));\n    }\n\n    const validationSchema = Yup.object({\n        displayName: Yup.string().required(),\n        bio: Yup.string().required()\n    })\n\n    return (\n        <Formik\n            validationSchema={validationSchema}\n            initialValues={{ displayName: profile?.displayName, bio: profile?.bio }}\n            onSubmit={values => handleFormSubmit(values)} >\n            {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                <Form className='ui form'>\n                    <MyTextInput name='displayName' placeholder='DisplayName' />\n                    <MyTextArea name='bio' placeholder='Add your bio' rows={3} />\n                    <Button\n                        disabled={isSubmitting || !isValid || !dirty || loading}\n                        floated='right'\n                        positive\n                        type='submit'\n                        content='Update profile' />\n                </Form>\n            )}\n        </Formik >\n    )\n})","import React, { useState } from 'react';\nimport { Button, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileEditForm from './ProfileEditForm';\n\nexport default function ProfileAbout() {\n    const [editMode, setEditMode] = useState(false);\n    const { profileStore: { isCurrentUser } } = useStore();\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user' content='About Bob' />\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={editMode ? 'Cancel' : 'Edit Profile'}\n                            onClick={() => setEditMode(!editMode)} />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {isCurrentUser && editMode && (\n                        <ProfileEditForm editMode={setEditMode} />\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const { profileStore } = useStore();\n    const { profile, followings, loadingFollowings, activeTab } = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='user'\n                        content={activeTab === 3 ? `People following ${profile?.displayName}` :\n                            `People ${profile?.displayName} is following`} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.userName} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React, { SyntheticEvent } from 'react';\nimport { Grid, Header, Tab, Card, Image, TabProps } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { format } from 'date-fns';\nimport { Link } from 'react-router-dom';\n\nexport default observer(function ProfleActivities() {\n    const { profileStore: {\n        profile,\n        loadingActivities,\n        loadUserActivities,\n        UserActivities } } = useStore();\n\n    const panes = [\n        { menuItem: 'Future Events', pane: { key: 'future' } },\n        { menuItem: 'Past Events', pane: { key: 'past' } },\n        { menuItem: 'Hosting', pane: { key: 'hosting' } }\n    ]\n\n    useEffect(() => {\n        loadUserActivities(profile!.userName);\n    }, [loadUserActivities, profile])\n\n    function handleTabChange(e: SyntheticEvent, data: TabProps) {\n        loadUserActivities(profile!.userName,\n            panes[data.activeIndex as number].pane.key)\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content='Activities' />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {UserActivities?.map(userActivity => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${userActivity.id}`}\n                                key={userActivity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${userActivity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{userActivity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(userActivity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(userActivity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n})","import React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport ProfilePhotos from './ProfilePhotos';\nimport ProfileAbout from './ProfileAbout';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfileActivities from './ProfileActivities';\nimport { useStore } from '../../app/stores/store';\nimport { observer } from 'mobx-react-lite';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({ profile }: Props) {\n    const { profileStore } = useStore();\n\n    const panes = [\n        { menuItem: 'About', render: () => <ProfileAbout /> },\n        { menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} /> },\n        { menuItem: 'Events', render: () => <ProfileActivities /> },\n        { menuItem: 'Followers', render: () => <ProfileFollowings /> },\n        { menuItem: 'Following', render: () => <ProfileFollowings /> }\n    ];\n\n    return (\n        <Tab\n            menu={{ fluid: true, vertical: true }}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import React from 'react'\nimport { Grid } from 'semantic-ui-react'\nimport ProfileHeader from './ProfileHeader';\nimport ProfileContent from './ProfileContent';\nimport { observer } from 'mobx-react-lite';\nimport { useParams } from 'react-router-dom';\nimport { useStore } from '../../app/stores/store';\nimport { useEffect } from 'react';\nimport LoadingComponent from '../../app/layout/LoadingComponent';\n\n\nexport default observer(function ProfilePage() {\n    const { username } = useParams<{ username: string }>();\n    const { profileStore } = useStore();\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return (() => {\n            setActiveTab(0);\n        })\n    }, [loadProfile, username, setActiveTab]);\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>\n                }\n            </Grid.Column>\n        </Grid>\n    )\n})","import React, { useState } from 'react';\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}","import React from 'react';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const { commonStore } = useStore();\n\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{ marginTop: '10px' }}>\n                        {commonStore.error.details}\n                    </code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const { modalStore } = useStore();\n\n    return (\n        <Modal\n            open={modalStore.modal.open}\n            onClose={modalStore.closeModal}\n            size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router';\nimport { useStore } from '../stores/store';\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({ component: Component, ...rest }: Props) {\n    const { userStore: { isLoggedIn } } = useStore();\n\n    return (\n        <Route\n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport NavBar from './NavBar';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport TestErrors from '../../features/errors/TestErrors';\nimport NotFound from '../../features/errors/NotFound';\nimport { ToastContainer } from 'react-toastify';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport PrivateRoute from '../layout/PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route path='/' exact component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute path='/activities' exact component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n    const { pathname } = useLocation();\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, [pathname]);\n\n    return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-datepicker/dist/react-datepicker.css'\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}